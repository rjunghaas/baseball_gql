{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query PlayerId($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  //const client = useApolloClient();\n  // Use useLazyQuery() hook to pass in query server\n  const _useLazyQuery = useLazyQuery(PLAYER_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        getPlayer = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        error = _useLazyQuery2$.error,\n        data = _useLazyQuery2$.data; // handle error state\n\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  }\n  /*if(data){\n    let playerId:number = data.getPlayer.id;\n     client.writeData({\n      data: {\n        id: playerId\n      }\n    });\n  }*/\n  // Render JSX element and insert data\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter Player's Name\",\n    value: data ? data.getPlayer.searchStr : '',\n    onChange: e => {\n      e.preventDefault();\n      getPlayer({\n        variables: {\n          searchStr: e.target.value\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, data ? data.getPlayer.name : ''));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useLazyQuery","PLAYER_QUERY","NameSearch","getPlayer","error","data","console","warn","message","searchStr","e","preventDefault","variables","target","value","name"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,YAAT,QAA8C,qBAA9C;AAEA,MAAMC,YAAY,GAAGF,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASG,UAAT,GAA2B;AACzB;AACA;AAEA;AAJyB,wBAKYF,YAAY,CAACC,YAAD,CALxB;AAAA;AAAA,QAKlBE,SALkB;AAAA;AAAA,QAKLC,KALK,mBAKLA,KALK;AAAA,QAKEC,IALF,mBAKEA,IALF,EAOzB;;;AACA,MAAID,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACC,IAAR,CAAaH,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACI,OAArB,MAAR;AACD;AAED;;;;;;;;AAUA;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,qBAA/B;AAAqD,IAAA,KAAK,EAAEH,IAAI,GAAGA,IAAI,CAACF,SAAL,CAAeM,SAAlB,GAA8B,EAA9F;AAAkG,IAAA,QAAQ,EAAEC,CAAC,IAAI;AAACA,MAAAA,CAAC,CAACC,cAAF;AAAoBR,MAAAA,SAAS,CAAC;AAAES,QAAAA,SAAS,EAAE;AAAEH,UAAAA,SAAS,EAAEC,CAAC,CAACG,MAAF,CAASC;AAAtB;AAAb,OAAD,CAAT;AAAuD,KAA7L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,IAAI,GAAGA,IAAI,CAACF,SAAL,CAAeY,IAAlB,GAAyB,EAAlC,CAHF,CADF;AAOD;;AAAA;AAED,eAAeb,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\n\nconst PLAYER_QUERY = gql`\n  query PlayerId($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  //const client = useApolloClient();\n\n  // Use useLazyQuery() hook to pass in query server\n  const [getPlayer, { error, data }] = useLazyQuery(PLAYER_QUERY);\n\n  // handle error state\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  /*if(data){\n    let playerId:number = data.getPlayer.id;\n\n    client.writeData({\n      data: {\n        id: playerId\n      }\n    });\n  }*/\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Enter Player's Name\" value={data ? data.getPlayer.searchStr : ''} onChange={e => {e.preventDefault(); getPlayer({ variables: { searchStr: e.target.value }})} }/>\n      <br/>\n      <h3>{data ? data.getPlayer.name : ''}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}