{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useLazyQuery() hook to pass in query server\n  //const [getPlayer, { loading, error, data}] = useLazyQuery(PLAYER_QUERY);\n\n  const _useQuery = useQuery(PLAYER_QUERY, {\n    variables: {\n      searchStr: ''\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data,\n        refetch = _useQuery.refetch; // handle return and error states\n\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"'Loading...'\");\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  } // Render JSX element and insert data\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter Player's Name\",\n    value: data ? data.getPlayer.searchStr : '',\n    onChange: e => {\n      e.preventDefault();\n      refetch({\n        variables: {\n          searchStr: e.target.value\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, data ? data.getPlayer.name : ''));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useQuery","useApolloClient","PLAYER_QUERY","NameSearch","client","variables","searchStr","loading","error","data","refetch","console","warn","message","getPlayer","e","preventDefault","target","value","name"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,EAAiCC,eAAjC,QAAwD,qBAAxD;AAEA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CAFyB,CAIzB;AACA;;AALyB,oBAMiBD,QAAQ,CAACE,YAAD,EAAe;AAACG,IAAAA,SAAS,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ;AAAZ,GAAf,CANzB;AAAA,QAMjBC,OANiB,aAMjBA,OANiB;AAAA,QAMRC,KANQ,aAMRA,KANQ;AAAA,QAMDC,IANC,aAMDA,IANC;AAAA,QAMKC,OANL,aAMKA,OANL,EAQzB;;;AACA,MAAIH,OAAJ,EAAa,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;;AACb,MAAIC,KAAJ,EAAW;AACTG,IAAAA,OAAO,CAACC,IAAR,CAAaJ,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACK,OAArB,MAAR;AACD,GAbwB,CAezB;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,qBAA/B;AAAqD,IAAA,KAAK,EAAEJ,IAAI,GAAGA,IAAI,CAACK,SAAL,CAAeR,SAAlB,GAA8B,EAA9F;AAAkG,IAAA,QAAQ,EAAES,CAAC,IAAI;AAACA,MAAAA,CAAC,CAACC,cAAF;AAAoBN,MAAAA,OAAO,CAAC;AAAEL,QAAAA,SAAS,EAAE;AAAEC,UAAAA,SAAS,EAAES,CAAC,CAACE,MAAF,CAASC;AAAtB;AAAb,OAAD,CAAP;AAAqD,KAA3L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,IAAI,GAAGA,IAAI,CAACK,SAAL,CAAeK,IAAlB,GAAyB,EAAlC,CAHF,CADF;AAOD;;AAAA;AAED,eAAehB,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useLazyQuery, useApolloClient } from '@apollo/react-hooks';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useLazyQuery() hook to pass in query server\n  //const [getPlayer, { loading, error, data}] = useLazyQuery(PLAYER_QUERY);\n  const { loading, error, data, refetch } = useQuery(PLAYER_QUERY, {variables: {searchStr: ''}});\n\n  // handle return and error states\n  if (loading) return (<div>'Loading...'</div>);\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Enter Player's Name\" value={data ? data.getPlayer.searchStr : ''} onChange={e => {e.preventDefault(); refetch({ variables: { searchStr: e.target.value }})}  }/>\n      <br/>\n      <h3>{data ? data.getPlayer.name : ''}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}