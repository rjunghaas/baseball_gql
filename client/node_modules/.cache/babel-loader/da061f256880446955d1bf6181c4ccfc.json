{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation setPlayer($searchStr: String!) {\\n    setPlayerId(searchStr: $searchStr)\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useMutation, useApolloClient } from '@apollo/react-hooks';\n/*const PLAYER_QUERY = gql`\n  query PlayerId($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;*/\n\nconst PLAYER_MUTATION = gql(_templateObject()); // NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n  let cache = client.cache;\n  let initialPlayerText = '';\n  let initialName = ''; //const [getPlayer, { error, data }] = useLazyQuery(PLAYER_QUERY);\n  // handle error state\n\n  /*if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }*/\n\n  const _useMutation = useMutation(PLAYER_MUTATION),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        setPlayerId = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        playerText = _useMutation2$.playerText,\n        name = _useMutation2$.name; // Render JSX element and insert data\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter Player's Name\",\n    value: playerText ? playerText : initialPlayerText,\n    onChange: e => {\n      e.preventDefault();\n      setPlayerId({\n        variables: {\n          searchStr: e.target.value\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, name ? name : initialName));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useMutation","useApolloClient","PLAYER_MUTATION","NameSearch","client","cache","initialPlayerText","initialName","setPlayerId","playerText","name","e","preventDefault","variables","searchStr","target","value"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAAuBC,WAAvB,EAAoCC,eAApC,QAA2D,qBAA3D;AAEA;;;;;;;;;;AAUA,MAAMC,eAAe,GAAGH,GAAH,mBAArB,C,CAMA;AACA;;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B;AACA,MAAII,KAAK,GAAGD,MAAM,CAACC,KAAnB;AACA,MAAIC,iBAAwB,GAAG,EAA/B;AACA,MAAIC,WAAkB,GAAG,EAAzB,CALyB,CAOzB;AAEA;;AACA;;;;;AAVyB,uBAemBP,WAAW,CAACE,eAAD,CAf9B;AAAA;AAAA,QAelBM,WAfkB;AAAA;AAAA,QAeHC,UAfG,kBAeHA,UAfG;AAAA,QAeSC,IAfT,kBAeSA,IAfT,EAiBzB;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,qBAA/B;AAAqD,IAAA,KAAK,EAAED,UAAU,GAAGA,UAAH,GAAgBH,iBAAtF;AAAyG,IAAA,QAAQ,EAAEK,CAAC,IAAI;AAACA,MAAAA,CAAC,CAACC,cAAF;AAAoBJ,MAAAA,WAAW,CAAC;AAAEK,QAAAA,SAAS,EAAE;AAAEC,UAAAA,SAAS,EAAEH,CAAC,CAACI,MAAF,CAASC;AAAtB;AAAb,OAAD,CAAX;AAAyD,KAAtM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,IAAI,GAAGA,IAAH,GAAUH,WAAnB,CAHF,CADF;AAOD;;AAAA;AAED,eAAeJ,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useMutation, useApolloClient } from '@apollo/react-hooks';\n\n/*const PLAYER_QUERY = gql`\n  query PlayerId($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;*/\n\nconst PLAYER_MUTATION = gql`\n  mutation setPlayer($searchStr: String!) {\n    setPlayerId(searchStr: $searchStr)\n  }\n`;\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n  let cache = client.cache;\n  let initialPlayerText:string = '';\n  let initialName:string = '';\n\n  //const [getPlayer, { error, data }] = useLazyQuery(PLAYER_QUERY);\n\n  // handle error state\n  /*if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }*/\n\n  const [setPlayerId, { playerText, name }] = useMutation(PLAYER_MUTATION);\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Enter Player's Name\" value={playerText ? playerText : initialPlayerText} onChange={e => {e.preventDefault(); setPlayerId({ variables: { searchStr: e.target.value }})}}/>\n      <br/>\n      <h3>{name ? name : initialName}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}