{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query PlayerVorp($playerId: Int!, $startDate: String!, $endDate: String!){\\n    getPlayerVorp(playerId: $playerId, startDate: $startDate, endDate: $endDate)\\n    {\\n      vorp\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    playerId @client\\n    startDate @client\\n    endDate @client\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks'; // GQL query to get player data from cache which will be passed to a remote query\n\nconst ID_QUERY = gql(_templateObject()); // Remote query to calculate player's VORP given their ID as well as\n// the start and end date of the calculation\n\nconst VORP_QUERY = gql(_templateObject2()); // helper function to validate string is in proper date format\n\nfunction validateDate(testdate) {\n  var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/;\n  return date_regex.test(testdate);\n} // React component which consists of date fields for start and end dates as well\n// as submit button to trigger VORP calculation\n\n\nconst SubmitSearch = () => {\n  // connect to our client so that we can access cache\n  const client = useApolloClient();\n  let cache = client.cache; // Create a function that we can use to trigger our query to server for\n  // calculating VORP\n\n  const _useLazyQuery = useLazyQuery(VORP_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        calcPlayerVorp = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        error = _useLazyQuery2$.error,\n        data = _useLazyQuery2$.data; // Helper function to set start and end Date values in cache\n\n\n  function setDate(dateType, dateValue) {\n    // Ensure we first have a valid date.  If so, set it in cache\n    if (validateDate(dateValue)) {\n      if (dateType === 'start') {\n        cache.writeData({\n          data: {\n            startDate: dateValue\n          }\n        });\n      } else if (dateType === 'end') {\n        cache.writeData({\n          data: {\n            endDate: dateValue\n          }\n        });\n      }\n    }\n\n    return null;\n  } // Helper function to send parameters to server to calculate VORP\n\n\n  function getVorp() {\n    // Fetch playerId, start, and end dates from cache and assign to local variables\n    let d = cache.readQuery({\n      query: ID_QUERY\n    });\n    let currPlayerId = d.playerId;\n    let currStartDate = d.startDate;\n    let currEndDate = d.endDate; // Pass in values from cache and trigger our VORP function\n\n    calcPlayerVorp({\n      variables: {\n        playerId: currPlayerId,\n        startDate: currStartDate,\n        endDate: currEndDate\n      }\n    }); // Handle errors\n\n    if (error) {\n      console.warn(error);\n    }\n\n    return;\n  }\n\n  ; // Render component, connect date fields to relevant cache field,\n  // and set onclick for submit button to relevant function.\n  // Show rounded value of vorp property\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Start Date for Player:\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), \" \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    onChange: e => setDate('start', e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"End Date for Player: \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    onChange: e => setDate('end', e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    name: \"submit\",\n    onClick: () => getVorp(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"VORP: \", data ? data.getPlayerVorp.vorp : '')));\n};\n\nexport default SubmitSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","ID_QUERY","VORP_QUERY","validateDate","testdate","date_regex","test","SubmitSearch","client","cache","calcPlayerVorp","error","data","setDate","dateType","dateValue","writeData","startDate","endDate","getVorp","d","readQuery","query","currPlayerId","playerId","currStartDate","currEndDate","variables","console","warn","e","target","value","getPlayerVorp","vorp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\n\n// GQL query to get player data from cache which will be passed to a remote query\nconst ID_QUERY = gql`\n  {\n    playerId @client\n    startDate @client\n    endDate @client\n  }\n`;\n\n// Remote query to calculate player's VORP given their ID as well as\n// the start and end date of the calculation\nconst VORP_QUERY = gql`\n  query PlayerVorp($playerId: Int!, $startDate: String!, $endDate: String!){\n    getPlayerVorp(playerId: $playerId, startDate: $startDate, endDate: $endDate)\n    {\n      vorp\n    }\n  }\n`;\n\n// helper function to validate string is in proper date format\nfunction validateDate(testdate: string) {\n    var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/ ;\n    return date_regex.test(testdate);\n}\n\n// React component which consists of date fields for start and end dates as well\n// as submit button to trigger VORP calculation\nconst SubmitSearch = (): any => {\n  // connect to our client so that we can access cache\n  const client = useApolloClient();\n  let cache = client.cache;\n\n  // Create a function that we can use to trigger our query to server for\n  // calculating VORP\n  const [calcPlayerVorp, { error, data }] = useLazyQuery(VORP_QUERY);\n\n  // Helper function to set start and end Date values in cache\n  function setDate(dateType:string, dateValue:string) {\n    // Ensure we first have a valid date.  If so, set it in cache\n    if(validateDate(dateValue)){\n      if(dateType === 'start') {\n        cache.writeData({\n          data: {\n            startDate: dateValue\n          }\n        })\n      }\n      else if (dateType === 'end') {\n          cache.writeData({\n            data: {\n              endDate: dateValue\n            }\n          })\n      }\n    }\n    return null;\n  }\n\n  // Helper function to send parameters to server to calculate VORP\n  function getVorp():void {\n    // Fetch playerId, start, and end dates from cache and assign to local variables\n    let d:any = cache.readQuery({query: ID_QUERY});\n    let currPlayerId = d.playerId;\n    let currStartDate = d.startDate;\n    let currEndDate = d.endDate\n\n    // Pass in values from cache and trigger our VORP function\n    calcPlayerVorp({\n      variables: {\n        playerId: currPlayerId,\n        startDate: currStartDate,\n        endDate: currEndDate\n      }\n    });\n\n    // Handle errors\n    if (error) {\n      console.warn(error);\n    }\n    return;\n  };\n\n  // Render component, connect date fields to relevant cache field,\n  // and set onclick for submit button to relevant function.\n  // Show rounded value of vorp property\n  return (\n    <div>\n        <div> <h4>Start Date for Player:</h4> <br /> </div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" onChange={e => setDate('start', e.target.value)}/></div>\n        <div> <h4>End Date for Player: </h4><br /></div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" onChange={e => setDate('end', e.target.value)}/></div>\n        <div><input type=\"submit\" value=\"Submit\" name=\"submit\" onClick={() => getVorp()}/></div>\n        <br />\n        <div><h3>VORP: { data ? data.getPlayerVorp.vorp : '' }</h3></div>\n    </div>\n  )\n}\n\nexport default SubmitSearch;\n"]},"metadata":{},"sourceType":"module"}