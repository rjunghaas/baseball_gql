{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useQuery() hook to pass in text values\n\n  const _useLazyQuery = useLazyQuery(PLAYER_QUERY, {\n    variables: {\n      searchStr: 'Marcus Se'\n    }\n  }),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        getPlayer = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        loading = _useLazyQuery2$.loading,\n        data = _useLazyQuery2$.data;\n\n  let retObj = getPlayer();\n  console.log(retObj);\n  console.log(data); //const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: 'Marcus Se'}});\n  // handle return and error states\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"'Loading...'\");\n  /*if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }*/\n  // Cache results from our GraphQL query\n\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id\n    }\n  }); // Render JSX element and insert data\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: data.getPlayer.searchStr,\n    onChange: e => e.preventDefault(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, data.getPlayer.name));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","PLAYER_QUERY","NameSearch","client","variables","searchStr","getPlayer","loading","data","retObj","console","log","writeData","name","id","e","preventDefault"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAAmBC,YAAnB,EAAiCC,eAAjC,QAAwD,qBAAxD;AAGA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CAFyB,CAIzB;;AAJyB,wBAKcD,YAAY,CAACE,YAAD,EAAe;AAAEG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb;AAAb,GAAf,CAL1B;AAAA;AAAA,QAKlBC,SALkB;AAAA;AAAA,QAKLC,OALK,mBAKLA,OALK;AAAA,QAKIC,IALJ,mBAKIA,IALJ;;AAMzB,MAAIC,MAAY,GAAGH,SAAS,EAA5B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EARyB,CAUzB;AAEA;;AACA,MAAID,OAAJ,EAAa,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;AACb;;;;AAKA;;AACAJ,EAAAA,MAAM,CAACS,SAAP,CAAiB;AACfJ,IAAAA,IAAI,EAAE;AACJH,MAAAA,SAAS,EAAEG,IAAI,CAACF,SAAL,CAAeD,SADtB;AAEJQ,MAAAA,IAAI,EAAEL,IAAI,CAACF,SAAL,CAAeO,IAFjB;AAGJC,MAAAA,EAAE,EAAEN,IAAI,CAACF,SAAL,CAAeQ;AAHf;AADS,GAAjB,EApByB,CA4BzB;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAEN,IAAI,CAACF,SAAL,CAAeD,SAA/D;AAA0E,IAAA,QAAQ,EAAEU,CAAC,IAAEA,CAAC,CAACC,cAAF,EAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKR,IAAI,CAACF,SAAL,CAAeO,IAApB,CAHF,CADF;AAOD;;AAAA;AAED,eAAeX,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nimport { typeDefs } from './BaseballApp';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useQuery() hook to pass in text values\n  const [getPlayer, { loading, data }] = useLazyQuery(PLAYER_QUERY, { variables: { searchStr: 'Marcus Se' }});\n  let retObj: void = getPlayer();\n  console.log(retObj);\n  console.log(data);\n\n  //const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: 'Marcus Se'}});\n\n  // handle return and error states\n  if (loading) return (<div>'Loading...'</div>);\n  /*if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }*/\n\n  // Cache results from our GraphQL query\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id,\n    }\n  });\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={data.getPlayer.searchStr} onChange={e=>e.preventDefault() }/>\n      <br/>\n      <h3>{data.getPlayer.name}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}