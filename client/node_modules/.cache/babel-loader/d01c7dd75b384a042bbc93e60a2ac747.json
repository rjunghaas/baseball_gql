{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query getPlayer($name: String!) {\\n    getPlayerId(name: $name) @client\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query PlayerId($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\nconst PLAYER_ID_QUERY = gql(_templateObject2());\nexport const resolvers = {\n  Mutation: {\n    setPlayerId: (_, {\n      searchStr\n    }, {\n      cache\n    }) => {\n      const _useQuery = useQuery(PLAYER_QUERY),\n            error = _useQuery.error,\n            data = _useQuery.data;\n\n      if (error) {\n        console.warn(error);\n        return \"Error! \".concat(error.message);\n      }\n\n      if (data) {\n        cache.writeData({\n          data: {\n            searchStr: searchStr,\n            name: data.getPlayer.name,\n            id: data.getPlayer.id\n          }\n        });\n      }\n\n      return {\n        searchStr,\n        name\n      };\n    }\n  },\n  Query: {\n    getPlayerId: (_, {\n      name\n    }, {\n      cache\n    }) => {\n      const _useQuery2 = useQuery(PLAYER_ID_QUERY),\n            error = _useQuery2.error,\n            data = _useQuery2.data;\n    }\n  }\n};\nexport default resolvers;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/resolvers.ts"],"names":["gql","useQuery","PLAYER_QUERY","PLAYER_ID_QUERY","resolvers","Mutation","setPlayerId","_","searchStr","cache","error","data","console","warn","message","writeData","name","getPlayer","id","Query","getPlayerId"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,MAAMC,YAAY,GAAGF,GAAH,mBAAlB;AASA,MAAMG,eAAe,GAAGH,GAAH,oBAArB;AAcA,OAAO,MAAMI,SAAS,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,CAAD,EAAY;AAAEC,MAAAA;AAAF,KAAZ,EAA8C;AAAEC,MAAAA;AAAF,KAA9C,KAAiE;AAAA,wBACpDR,QAAQ,CAACC,YAAD,CAD4C;AAAA,YACpEQ,KADoE,aACpEA,KADoE;AAAA,YAC7DC,IAD6D,aAC7DA,IAD6D;;AAG5E,UAAID,KAAJ,EAAW;AACTE,QAAAA,OAAO,CAACC,IAAR,CAAaH,KAAb;AACA,gCAAkBA,KAAK,CAACI,OAAxB;AACD;;AAED,UAAGH,IAAH,EAAQ;AACNF,QAAAA,KAAK,CAACM,SAAN,CAAgB;AACdJ,UAAAA,IAAI,EAAE;AACJH,YAAAA,SAAS,EAAEA,SADP;AAEJQ,YAAAA,IAAI,EAAEL,IAAI,CAACM,SAAL,CAAeD,IAFjB;AAGJE,YAAAA,EAAE,EAAEP,IAAI,CAACM,SAAL,CAAeC;AAHf;AADQ,SAAhB;AAOD;;AACD,aAAO;AAAEV,QAAAA,SAAF;AAAaQ,QAAAA;AAAb,OAAP;AACD;AAnBO,GADa;AAuBvBG,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE,CAACb,CAAD,EAAW;AAAES,MAAAA;AAAF,KAAX,EAAqB;AAAEP,MAAAA;AAAF,KAArB,KAAmC;AAAA,yBACtBR,QAAQ,CAACE,eAAD,CADc;AAAA,YACtCO,KADsC,cACtCA,KADsC;AAAA,YAC/BC,IAD+B,cAC/BA,IAD+B;AAE/C;AAHI;AAvBgB,CAAlB;AA8BP,eAAeP,SAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst PLAYER_QUERY = gql`\n  query PlayerId($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      name\n      id\n    }\n  }\n`;\n\nconst PLAYER_ID_QUERY = gql`\n  query getPlayer($name: String!) {\n    getPlayerId(name: $name) @client\n  }\n`;\n\ntype setPlayerQueryObj = {\n  searchStr: string\n};\n\ntype getPlayerIdQueryObj = {\n  name: string\n}\n\nexport const resolvers = {\n  Mutation: {\n    setPlayerId: (_: Object, { searchStr }: setPlayerQueryObj, { cache }: any) => {\n      const { error, data } = useQuery(PLAYER_QUERY);\n\n      if (error) {\n        console.warn(error);\n        return (`Error! ${error.message}`);\n      }\n\n      if(data){\n        cache.writeData({\n          data: {\n            searchStr: searchStr,\n            name: data.getPlayer.name,\n            id: data.getPlayer.id,\n          }\n        })\n      }\n      return { searchStr, name };\n    }\n  },\n\n  Query: {\n    getPlayerId: (_:Object, { name }, { cache }) => {\n      const { error, data } = useQuery(PLAYER_ID_QUERY);\n    }\n  }\n};\n\nexport default resolvers;\n"]},"metadata":{},"sourceType":"module"}