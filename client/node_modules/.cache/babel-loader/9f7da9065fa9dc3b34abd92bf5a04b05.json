{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  id @client\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\nconst ID_QUERY = gql(_templateObject2());\n\nfunction getPlayerIdFromCache() {\n  let _useQuery = useQuery(ID_QUERY),\n      data = _useQuery.data,\n      client = _useQuery.client;\n\n  console.log(data);\n} // NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\n\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useQuery() hook to pass in text values\n\n  const _useQuery2 = useQuery(PLAYER_QUERY, {\n    variables: {\n      searchStr: 'Marcus Se'\n    }\n  }),\n        loading = _useQuery2.loading,\n        error = _useQuery2.error,\n        data = _useQuery2.data; // handle return and error states\n\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"'Loading...'\");\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  }\n\n  let playerName = data.getPlayer.name;\n  let textEntered = data.getPlayer.searchStr;\n  console.log(textEntered);\n  console.log(playerName); // Cache results from our GraphQL query\n\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id\n    }\n  });\n  getPlayerIdFromCache(); // Render JSX element and insert data\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: data.getPlayer.searchStr,\n    onChange: e => e.preventDefault(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, data.getPlayer.name));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useQuery","useApolloClient","PLAYER_QUERY","ID_QUERY","getPlayerIdFromCache","data","client","console","log","NameSearch","variables","searchStr","loading","error","warn","message","playerName","getPlayer","name","textEntered","writeData","id","e","preventDefault"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,qBAA1C;AAGA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB;AAUA,MAAMI,QAAQ,GAAGJ,GAAH,oBAAd;;AAIA,SAASK,oBAAT,GAA+B;AAAA,kBACNJ,QAAQ,CAACG,QAAD,CADF;AAAA,MACvBE,IADuB,aACvBA,IADuB;AAAA,MACjBC,MADiB,aACjBA,MADiB;;AAG7BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,C,CAED;AACA;;;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMH,MAAM,GAAGL,eAAe,EAA9B,CAFyB,CAIzB;;AAJyB,qBAKQD,QAAQ,CAACE,YAAD,EAAe;AAACQ,IAAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb;AAAZ,GAAf,CALhB;AAAA,QAKjBC,OALiB,cAKjBA,OALiB;AAAA,QAKRC,KALQ,cAKRA,KALQ;AAAA,QAKDR,IALC,cAKDA,IALC,EAOzB;;;AACA,MAAIO,OAAJ,EAAa,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;;AACb,MAAIC,KAAJ,EAAW;AACTN,IAAAA,OAAO,CAACO,IAAR,CAAaD,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACE,OAArB,MAAR;AACD;;AAED,MAAIC,UAAiB,GAAGX,IAAI,CAACY,SAAL,CAAeC,IAAvC;AACA,MAAIC,WAAkB,GAAGd,IAAI,CAACY,SAAL,CAAeN,SAAxC;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYW,WAAZ;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYQ,UAAZ,EAjByB,CAmBzB;;AACAV,EAAAA,MAAM,CAACc,SAAP,CAAiB;AACff,IAAAA,IAAI,EAAE;AACJM,MAAAA,SAAS,EAAEN,IAAI,CAACY,SAAL,CAAeN,SADtB;AAEJO,MAAAA,IAAI,EAAEb,IAAI,CAACY,SAAL,CAAeC,IAFjB;AAGJG,MAAAA,EAAE,EAAEhB,IAAI,CAACY,SAAL,CAAeI;AAHf;AADS,GAAjB;AAQAjB,EAAAA,oBAAoB,GA5BK,CA8BzB;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAEC,IAAI,CAACY,SAAL,CAAeN,SAA/D;AAA0E,IAAA,QAAQ,EAAEW,CAAC,IAAEA,CAAC,CAACC,cAAF,EAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKlB,IAAI,CAACY,SAAL,CAAeC,IAApB,CAHF,CADF;AAOD;;AAAA;AAED,eAAeT,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nimport { typeDefs } from './BaseballApp';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\nconst ID_QUERY = gql`\n  id @client\n`;\n\nfunction getPlayerIdFromCache(){\n  let { data, client } = useQuery(ID_QUERY);\n\n  console.log(data);\n}\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useQuery() hook to pass in text values\n  const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: { searchStr: 'Marcus Se'}});\n\n  // handle return and error states\n  if (loading) return (<div>'Loading...'</div>);\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  let playerName:string = data.getPlayer.name;\n  let textEntered:string = data.getPlayer.searchStr;\n  console.log(textEntered);\n  console.log(playerName);\n\n  // Cache results from our GraphQL query\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id,\n    }\n  });\n\n  getPlayerIdFromCache();\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={data.getPlayer.searchStr} onChange={e=>e.preventDefault() }/>\n      <br/>\n      <h3>{data.getPlayer.name}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}