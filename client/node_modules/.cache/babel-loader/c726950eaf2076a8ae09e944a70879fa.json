{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query PlayerId($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n  let cache = client.cache;\n\n  const _useLazyQuery = useLazyQuery(PLAYER_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        getPlayer = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        error = _useLazyQuery2$.error,\n        data = _useLazyQuery2$.data;\n\n  function updatePlayer(searchStr) {\n    let newSearchStr = searchStr;\n\n    if (data) {\n      let newSearchStr = data.getPlayer.searchStr + searchStr;\n    }\n\n    getPlayer({\n      variables: {\n        searchStr: newSearchStr\n      }\n    }); // handle error state\n\n    if (error) {\n      console.warn(error);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"`Error! $\", error.message, \"`\");\n    }\n\n    if (data) {\n      cache.writeData({\n        data: {\n          __typename: 'Player',\n          searchStr: newSearchStr,\n          name: data.getPlayer.name,\n          id: data.getPlayer.id\n        }\n      });\n    }\n\n    console.log(cache);\n    return null;\n  }\n\n  ; // Render JSX element and insert data\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter Player's Name\",\n    value: data ? data.getPlayer.searchStr : '',\n    onChange: e => {\n      e.preventDefault();\n      updatePlayer(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, data ? data.getPlayer.name : ''));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","PLAYER_QUERY","NameSearch","client","cache","getPlayer","error","data","updatePlayer","searchStr","newSearchStr","variables","console","warn","message","writeData","__typename","name","id","log","e","preventDefault","target","value"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,qBAA9C;AAEA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B;AACA,MAAII,KAAK,GAAGD,MAAM,CAACC,KAAnB;;AAHyB,wBAIYL,YAAY,CAACE,YAAD,CAJxB;AAAA;AAAA,QAIlBI,SAJkB;AAAA;AAAA,QAILC,KAJK,mBAILA,KAJK;AAAA,QAIEC,IAJF,mBAIEA,IAJF;;AAMzB,WAASC,YAAT,CAAsBC,SAAtB,EAAwC;AACtC,QAAIC,YAAmB,GAAGD,SAA1B;;AACA,QAAGF,IAAH,EAAQ;AACN,UAAIG,YAAmB,GAAGH,IAAI,CAACF,SAAL,CAAeI,SAAf,GAA2BA,SAArD;AACD;;AAEDJ,IAAAA,SAAS,CAAC;AAACM,MAAAA,SAAS,EAAE;AAACF,QAAAA,SAAS,EAAEC;AAAZ;AAAZ,KAAD,CAAT,CANsC,CAQtC;;AACA,QAAIJ,KAAJ,EAAW;AACTM,MAAAA,OAAO,CAACC,IAAR,CAAaP,KAAb;AACA,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAeA,KAAK,CAACQ,OAArB,MAAR;AACD;;AAED,QAAGP,IAAH,EAAQ;AACNH,MAAAA,KAAK,CAACW,SAAN,CAAgB;AACdR,QAAAA,IAAI,EAAE;AACJS,UAAAA,UAAU,EAAE,QADR;AAEJP,UAAAA,SAAS,EAAEC,YAFP;AAGJO,UAAAA,IAAI,EAAEV,IAAI,CAACF,SAAL,CAAeY,IAHjB;AAIJC,UAAAA,EAAE,EAAEX,IAAI,CAACF,SAAL,CAAea;AAJf;AADQ,OAAhB;AAQD;;AAEDN,IAAAA,OAAO,CAACO,GAAR,CAAYf,KAAZ;AACA,WAAO,IAAP;AACD;;AAAA,GAjCwB,CAmCzB;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,qBAA/B;AAAqD,IAAA,KAAK,EAAEG,IAAI,GAAGA,IAAI,CAACF,SAAL,CAAeI,SAAlB,GAA8B,EAA9F;AAAkG,IAAA,QAAQ,EAAEW,CAAC,IAAI;AAACA,MAAAA,CAAC,CAACC,cAAF;AAAoBb,MAAAA,YAAY,CAACY,CAAC,CAACE,MAAF,CAASC,KAAV,CAAZ;AAA6B,KAAnK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKhB,IAAI,GAAGA,IAAI,CAACF,SAAL,CAAeY,IAAlB,GAAyB,EAAlC,CAHF,CADF;AAOD;;AAAA;AAED,eAAef,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\n\nconst PLAYER_QUERY = gql`\n  query PlayerId($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  __typename: string,\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n  let cache = client.cache;\n  const [getPlayer, { error, data }] = useLazyQuery(PLAYER_QUERY);\n\n  function updatePlayer(searchStr:string) {\n    let newSearchStr:string = searchStr;\n    if(data){\n      let newSearchStr:string = data.getPlayer.searchStr + searchStr;\n    }\n\n    getPlayer({variables: {searchStr: newSearchStr}});\n\n    // handle error state\n    if (error) {\n      console.warn(error);\n      return (<div>`Error! ${error.message}`</div>);\n    }\n\n    if(data){\n      cache.writeData({\n        data: {\n          __typename: 'Player',\n          searchStr: newSearchStr,\n          name: data.getPlayer.name,\n          id: data.getPlayer.id,\n        }\n      });\n    }\n\n    console.log(cache);\n    return null;\n  };\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Enter Player's Name\" value={data ? data.getPlayer.searchStr : ''} onChange={e => {e.preventDefault(); updatePlayer(e.target.value)}}/>\n      <br/>\n      <h3>{data ? data.getPlayer.name : ''}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}