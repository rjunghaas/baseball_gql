{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    playerId @client\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query PlayerVorp($id: Int!){\\n    getPlayerVorp(playerId: $id, startDate: \\\"01/01/2018\\\", endDate: \\\"12/31/2018\\\")\\n    {\\n      vorp\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nconst VORP_QUERY = gql(_templateObject());\nconst ID_QUERY = gql(_templateObject2()); // helper function to validate string is in proper date format\n\nfunction validateDate(testdate) {\n  var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/;\n  return date_regex.test(testdate);\n}\n\nconst SubmitSearch = () => {\n  // connect to our context so that we can access state values\n  const client = useApolloClient();\n  let cache = client.cache; // Use refetch() in useQuery to trigger Query when Submit button pressed: https://www.apollographql.com/docs/react/data/queries/#refetching\n  //const { loading, error, data, refetch } = useQuery(VORP_QUERY, {variables: {id: 11477}});\n\n  const _useLazyQuery = useLazyQuery(VORP_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        calcPlayerVorp = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        error = _useLazyQuery2$.error,\n        data = _useLazyQuery2$.data;\n\n  function getVorp() {\n    let retObj = cache.readQuery(ID_QUERY);\n    console.log(retObj);\n    calcPlayerVorp({\n      variables: {\n        playerId: 10155\n      }\n    });\n    if (loading) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Calculating...\"));\n\n    if (error) {\n      console.warn(error);\n      console.log(data);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"`Error! $\", error.message, \"`\");\n    }\n\n    return null;\n  }\n\n  ; // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n\n  console.log(data); // Using id local field as variable for getPlayerVorp Query:  https://www.apollographql.com/docs/react/data/local-state/#using-client-fields-as-variables\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Start Date for Player:\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), \" \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"End Date for Player: \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    name: \"submit\",\n    onClick: () => refetch(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"VORP: \", data.getPlayerVorp.vorp)));\n};\n\nexport default SubmitSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","VORP_QUERY","ID_QUERY","validateDate","testdate","date_regex","test","SubmitSearch","client","cache","calcPlayerVorp","error","data","getVorp","retObj","readQuery","console","log","variables","playerId","loading","warn","message","refetch","getPlayerVorp","vorp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useLazyQuery, useApolloClient } from '@apollo/react-hooks';\n\nconst VORP_QUERY = gql`\n  query PlayerVorp($id: Int!){\n    getPlayerVorp(playerId: $id, startDate: \"01/01/2018\", endDate: \"12/31/2018\")\n    {\n      vorp\n    }\n  }\n`;\n\nconst ID_QUERY = gql`\n  {\n    playerId @client\n  }\n`;\n\n// helper function to validate string is in proper date format\nfunction validateDate(testdate: string) {\n    var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/ ;\n    return date_regex.test(testdate);\n}\n\nconst SubmitSearch = (): any => {\n  // connect to our context so that we can access state values\n  const client = useApolloClient();\n  let cache = client.cache;\n\n  // Use refetch() in useQuery to trigger Query when Submit button pressed: https://www.apollographql.com/docs/react/data/queries/#refetching\n  //const { loading, error, data, refetch } = useQuery(VORP_QUERY, {variables: {id: 11477}});\n  const [calcPlayerVorp, { error, data }] = useLazyQuery(VORP_QUERY);\n\n  function getVorp():void {\n    let retObj:any = cache.readQuery(ID_QUERY);\n    console.log(retObj)\n\n    calcPlayerVorp({variables: {playerId: 10155}})\n\n    if(loading) return <div><h3>Calculating...</h3></div>;\n    if (error) {\n      console.warn(error);\n      console.log(data);\n      return (<div>`Error! ${error.message}`</div>);\n    }\n\n    return null;\n  };\n\n\n\n  // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n  console.log(data);\n  // Using id local field as variable for getPlayerVorp Query:  https://www.apollographql.com/docs/react/data/local-state/#using-client-fields-as-variables\n  return (\n    <div>\n        <div> <h4>Start Date for Player:</h4> <br /> </div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" /></div>\n        <div> <h4>End Date for Player: </h4><br /></div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" /></div>\n        <div><input type=\"submit\" value=\"Submit\" name=\"submit\" onClick={() => refetch()}/></div>\n        <br />\n        <div><h3>VORP: { data.getPlayerVorp.vorp }</h3></div>\n    </div>\n  )\n}\n\nexport default SubmitSearch;\n"]},"metadata":{},"sourceType":"module"}