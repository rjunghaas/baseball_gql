{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useQuery() hook to pass in text values\n\n  const _useLazyQuery = useLazyQuery(PLAYER_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        getPlayerQuery = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        loading = _useLazyQuery2$.loading,\n        error = _useLazyQuery2$.error,\n        data = _useLazyQuery2$.data;\n\n  console.log(getPlayerQuery);\n  console.log(data);\n  getPlayerQuery({\n    variables: {\n      searchStr: 'Marcus Se'\n    }\n  });\n  console.log(data); // handle return and error states\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"'Loading...'\");\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  } // Cache results from our GraphQL query\n\n\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id\n    }\n  }); // Render JSX element and insert data\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: data.getPlayer.searchStr,\n    onChange: e => e.preventDefault(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, data.getPlayer.name));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","PLAYER_QUERY","NameSearch","client","getPlayerQuery","loading","error","data","console","log","variables","searchStr","warn","message","writeData","getPlayer","name","id","e","preventDefault"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,qBAA9C;AAGA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CAFyB,CAIzB;;AAJyB,wBAK0BD,YAAY,CAACE,YAAD,CALtC;AAAA;AAAA,QAKlBG,cALkB;AAAA;AAAA,QAKAC,OALA,mBAKAA,OALA;AAAA,QAKSC,KALT,mBAKSA,KALT;AAAA,QAKgBC,IALhB,mBAKgBA,IALhB;;AAMzBC,EAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAH,EAAAA,cAAc,CAAC;AAACM,IAAAA,SAAS,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ;AAAZ,GAAD,CAAd;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EATyB,CAWzB;;AACA,MAAIF,OAAJ,EAAa,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;;AACb,MAAIC,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACI,IAAR,CAAaN,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACO,OAArB,MAAR;AACD,GAhBwB,CAkBzB;;;AACAV,EAAAA,MAAM,CAACW,SAAP,CAAiB;AACfP,IAAAA,IAAI,EAAE;AACJI,MAAAA,SAAS,EAAEJ,IAAI,CAACQ,SAAL,CAAeJ,SADtB;AAEJK,MAAAA,IAAI,EAAET,IAAI,CAACQ,SAAL,CAAeC,IAFjB;AAGJC,MAAAA,EAAE,EAAEV,IAAI,CAACQ,SAAL,CAAeE;AAHf;AADS,GAAjB,EAnByB,CA2BzB;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAEV,IAAI,CAACQ,SAAL,CAAeJ,SAA/D;AAA0E,IAAA,QAAQ,EAAEO,CAAC,IAAEA,CAAC,CAACC,cAAF,EAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKZ,IAAI,CAACQ,SAAL,CAAeC,IAApB,CAHF,CADF;AAOD;;AAAA;AAED,eAAed,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nimport { typeDefs } from './BaseballApp';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useQuery() hook to pass in text values\n  const [getPlayerQuery, { loading, error, data }] = useLazyQuery(PLAYER_QUERY);\n  console.log(getPlayerQuery);\n  console.log(data);\n  getPlayerQuery({variables: {searchStr: 'Marcus Se'}});\n  console.log(data);\n\n  // handle return and error states\n  if (loading) return (<div>'Loading...'</div>);\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  // Cache results from our GraphQL query\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id,\n    }\n  });\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={data.getPlayer.searchStr} onChange={e=>e.preventDefault() }/>\n      <br/>\n      <h3>{data.getPlayer.name}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}