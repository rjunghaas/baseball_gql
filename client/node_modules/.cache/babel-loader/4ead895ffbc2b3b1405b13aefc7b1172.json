{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    getPlayer(searchStr: String!){\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks'; //import { baseballActions } from '../state';\n//import { useStateValue } from './BaseballApp';\n//let NAME_SEARCH_URL: string = \"http://192.168.1.67:5000/player?str=\"\n\nconst PLAYER_QUERY = gql(_templateObject());\n/*function playerQuery(searchText:string) {\n  const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: searchText}});\n\n  if(error) return <p>Error </p>\n\n  let playerName:string = data.getPlayer.name;\n  console.log(playerName);\n\n  let playerId:number = data.getPlayer.id;\n  console.log(playerId);\n  //return playerName\n}*/\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\nconst NameSearch = ({\n  onPlayerTextEntered\n}) => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n  // https://github.com/apollographql/apollo-client/blob/version-2.6/docs/source/data/queries.mdx\n  const _useQuery = useQuery(PLAYER_QUERY),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (loading) return 'Loading...';\n  if (error) return \"Error! \".concat(error.message); // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n\n  /*async function getName(searchText:string): Promise<any> {\n    let str:string = searchText;\n    let url:string = NAME_SEARCH_URL + str;\n     const response = await fetch(url);\n    const data = await response.json();\n    // Once response received, convert to JSON and dispatch to action creator\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  }*/\n  // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    name: \"playerText\",\n    value: data.getPlayer.searchStr,\n    onChange: onPlayerTextEntered,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, data.getPlayer.name));\n};\n\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useQuery","PLAYER_QUERY","NameSearch","onPlayerTextEntered","loading","error","data","message","getPlayer","searchStr","name"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB,C,CACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGF,GAAH,mBAAlB;AASA;;;;;;;;;;;;AAaA;AACA;;AACA,MAAMG,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgC;AACjD;AACA;AAEA;AAJiD,oBAKhBH,QAAQ,CAACC,YAAD,CALQ;AAAA,QAKzCG,OALyC,aAKzCA,OALyC;AAAA,QAKhCC,KALgC,aAKhCA,KALgC;AAAA,QAKzBC,IALyB,aAKzBA,IALyB;;AAOjD,MAAIF,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAK,CAACE,OAAvB,EARsC,CAUjD;AACA;;AACA;;;;;;;;AAUA;AACA;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,IAAI,EAAC,YAA9C;AAA2D,IAAA,KAAK,EAAGD,IAAI,CAACE,SAAL,CAAeC,SAAlF;AAA8F,IAAA,QAAQ,EAAEN,mBAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMG,IAAI,CAACE,SAAL,CAAeE,IAArB,CAHF,CADF;AAOD,CA/BD;;AAiCA,eAAeR,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n//import { baseballActions } from '../state';\n//import { useStateValue } from './BaseballApp';\n//let NAME_SEARCH_URL: string = \"http://192.168.1.67:5000/player?str=\"\n\nconst PLAYER_QUERY = gql`\n  {\n    getPlayer(searchStr: String!){\n      name\n      id\n    }\n  }\n`;\n\n/*function playerQuery(searchText:string) {\n  const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: searchText}});\n\n  if(error) return <p>Error </p>\n\n  let playerName:string = data.getPlayer.name;\n  console.log(playerName);\n\n  let playerId:number = data.getPlayer.id;\n  console.log(playerId);\n  //return playerName\n}*/\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nconst NameSearch = ({onPlayerTextEntered}): any => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n\n  // https://github.com/apollographql/apollo-client/blob/version-2.6/docs/source/data/queries.mdx\n  const { loading, error, data } = useQuery(PLAYER_QUERY);\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n  /*async function getName(searchText:string): Promise<any> {\n    let str:string = searchText;\n    let url:string = NAME_SEARCH_URL + str;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    // Once response received, convert to JSON and dispatch to action creator\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  }*/\n\n  // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" name=\"playerText\" value={ data.getPlayer.searchStr } onChange={onPlayerTextEntered} />\n      <br />\n      <h3>{ data.getPlayer.name }</h3>\n    </div>\n  );\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}