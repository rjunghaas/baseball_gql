{"ast":null,"code":"import { action } from 'typesafe-actions'; // state object of app that will be stored in StateContext\n\n// initial state of the app\nexport const initialState = {\n  str: \"\",\n  nm: \"\",\n  id: 13110,\n  startDateStr: '',\n  endDateStr: '',\n  startDate: '01/01/1990',\n  endDate: '12/31/2020',\n  vorp: 0.00\n}; // constants for action type strings\n\nexport let actionTypes; // mapping action creators to their action types\n\n(function (actionTypes) {\n  actionTypes[\"NAME_MATCH_FOUND\"] = \"NAME_MATCHED\";\n  actionTypes[\"SET_START_DATE\"] = \"START_DATE\";\n  actionTypes[\"SET_END_DATE\"] = \"END_DATE\";\n  actionTypes[\"VORP_SUCCESS\"] = \"VORP_FOUND\";\n  actionTypes[\"UPDATE_START_DATE\"] = \"UPDATE_START_DATE\";\n  actionTypes[\"UPDATE_END_DATE\"] = \"UPDATE_END_DATE\";\n})(actionTypes || (actionTypes = {}));\n\nexport const baseballActions = {\n  matchSuccess: payload => action(actionTypes.NAME_MATCH_FOUND, payload),\n  setStartDate: payload => action(actionTypes.SET_START_DATE, payload),\n  setEndDate: payload => action(actionTypes.SET_END_DATE, payload),\n  vorpSuccess: payload => action(actionTypes.VORP_SUCCESS, payload),\n  updateStartDate: payload => action(actionTypes.UPDATE_START_DATE, payload),\n  updateEndDate: payload => action(actionTypes.UPDATE_END_DATE, payload)\n};","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/state.ts"],"names":["action","initialState","str","nm","id","startDateStr","endDateStr","startDate","endDate","vorp","actionTypes","baseballActions","matchSuccess","payload","NAME_MATCH_FOUND","setStartDate","SET_START_DATE","setEndDate","SET_END_DATE","vorpSuccess","VORP_SUCCESS","updateStartDate","UPDATE_START_DATE","updateEndDate","UPDATE_END_DATE"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB,C,CAEA;;AAkBA;AACA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,GAAG,EAAE,EADqB;AAE1BC,EAAAA,EAAE,EAAE,EAFsB;AAG1BC,EAAAA,EAAE,EAAE,KAHsB;AAI1BC,EAAAA,YAAY,EAAE,EAJY;AAK1BC,EAAAA,UAAU,EAAE,EALc;AAM1BC,EAAAA,SAAS,EAAE,YANe;AAO1BC,EAAAA,OAAO,EAAE,YAPiB;AAQ1BC,EAAAA,IAAI,EAAE;AARoB,CAArB,C,CAWP;;AACA,WAAYC,WAAZ,C,CASA;;WATYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAUZ,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,YAAY,EAAGC,OAAD,IAAuBb,MAAM,CAACU,WAAW,CAACI,gBAAb,EAA+BD,OAA/B,CADd;AAE7BE,EAAAA,YAAY,EAAGF,OAAD,IAAuBb,MAAM,CAACU,WAAW,CAACM,cAAb,EAA6BH,OAA7B,CAFd;AAG7BI,EAAAA,UAAU,EAAGJ,OAAD,IAAuBb,MAAM,CAACU,WAAW,CAACQ,YAAb,EAA2BL,OAA3B,CAHZ;AAI7BM,EAAAA,WAAW,EAAGN,OAAD,IAAuBb,MAAM,CAACU,WAAW,CAACU,YAAb,EAA2BP,OAA3B,CAJb;AAK7BQ,EAAAA,eAAe,EAAGR,OAAD,IAAuBb,MAAM,CAACU,WAAW,CAACY,iBAAb,EAAgCT,OAAhC,CALjB;AAM7BU,EAAAA,aAAa,EAAGV,OAAD,IAAwBb,MAAM,CAACU,WAAW,CAACc,eAAb,EAA8BX,OAA9B;AANhB,CAAxB","sourcesContent":["import { action } from 'typesafe-actions';\n\n// state object of app that will be stored in StateContext\nexport interface state {\n  str: string,\n  nm: string,\n  id: number,\n  startDateStr: string,\n  endDateStr: string,\n  startDate: string,\n  endDate: string,\n  vorp: number\n}\n\n// actions interface with type (for reducer) and payload\nexport interface actionInterface {\n  type: string,\n  payload: string[]\n}\n\n// initial state of the app\nexport const initialState = {\n  str: \"\",\n  nm: \"\",\n  id: 13110,\n  startDateStr: '',\n  endDateStr: '',\n  startDate: '01/01/1990',\n  endDate: '12/31/2020',\n  vorp: 0.00\n}\n\n// constants for action type strings\nexport enum actionTypes {\n  NAME_MATCH_FOUND = 'NAME_MATCHED',\n  SET_START_DATE = 'START_DATE',\n  SET_END_DATE = 'END_DATE',\n  VORP_SUCCESS = 'VORP_FOUND',\n  UPDATE_START_DATE = 'UPDATE_START_DATE',\n  UPDATE_END_DATE = 'UPDATE_END_DATE'\n}\n\n// mapping action creators to their action types\nexport const baseballActions = {\n  matchSuccess: (payload: string[]) => action(actionTypes.NAME_MATCH_FOUND, payload),\n  setStartDate: (payload: string[]) => action(actionTypes.SET_START_DATE, payload),\n  setEndDate: (payload: string[]) => action(actionTypes.SET_END_DATE, payload),\n  vorpSuccess: (payload: string[]) => action(actionTypes.VORP_SUCCESS, payload),\n  updateStartDate: (payload: string[]) => action(actionTypes.UPDATE_START_DATE, payload),\n  updateEndDate: (payload: string[]) =>  action(actionTypes.UPDATE_END_DATE, payload)\n}\n"]},"metadata":{},"sourceType":"module"}