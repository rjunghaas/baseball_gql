{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useLazyQuery() hook to pass in query server\n\n  const _useLazyQuery = useLazyQuery(PLAYER_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        getPlayer = _useLazyQuery2[0],\n        result = _useLazyQuery2[1];\n\n  console.log(result);\n  let name = '';\n  let searchStr = ''; //const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: 'Marcus Se'}});\n  // handle return and error states\n\n  if (result.loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"'Loading...'\");\n\n  if (result.error) {\n    console.warn(result.error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"`Error! $\", result.error.message, \"`\");\n  } // Render JSX element and insert data\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: result.data ? result.data.getPlayer.searchStr : '',\n    onChange: e => getPlayer({\n      variables: {\n        searchStr: e.target.value\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, result.data ? result.data.getPlayer.name : ''));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","PLAYER_QUERY","NameSearch","client","getPlayer","result","console","log","name","searchStr","loading","error","warn","message","data","e","variables","target","value"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAAmBC,YAAnB,EAAiCC,eAAjC,QAAwD,qBAAxD;AAGA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CAFyB,CAIzB;;AAJyB,wBAKGD,YAAY,CAACE,YAAD,CALf;AAAA;AAAA,QAKlBG,SALkB;AAAA,QAKPC,MALO;;AAMzBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,MAAIG,IAAI,GAAG,EAAX;AACA,MAAIC,SAAS,GAAG,EAAhB,CARyB,CAUzB;AAEA;;AACA,MAAIJ,MAAM,CAACK,OAAX,EAAoB,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;;AACpB,MAAIL,MAAM,CAACM,KAAX,EAAkB;AAChBL,IAAAA,OAAO,CAACM,IAAR,CAAaP,MAAM,CAACM,KAApB;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeN,MAAM,CAACM,KAAP,CAAaE,OAA5B,MAAR;AACD,GAjBwB,CAmBzB;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAER,MAAM,CAACS,IAAP,GAAcT,MAAM,CAACS,IAAP,CAAYV,SAAZ,CAAsBK,SAApC,GAAgD,EAAhG;AAAoG,IAAA,QAAQ,EAAEM,CAAC,IAAIX,SAAS,CAAC;AAAEY,MAAAA,SAAS,EAAE;AAAEP,QAAAA,SAAS,EAAEM,CAAC,CAACE,MAAF,CAASC;AAAtB;AAAb,KAAD,CAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKb,MAAM,CAACS,IAAP,GAAcT,MAAM,CAACS,IAAP,CAAYV,SAAZ,CAAsBI,IAApC,GAA2C,EAAhD,CAHF,CADF;AAOD;;AAAA;AAED,eAAeN,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nimport { typeDefs } from './BaseballApp';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useLazyQuery() hook to pass in query server\n  const [getPlayer, result] = useLazyQuery(PLAYER_QUERY);\n  console.log(result);\n  let name = '';\n  let searchStr = ''\n\n  //const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: 'Marcus Se'}});\n\n  // handle return and error states\n  if (result.loading) return (<div>'Loading...'</div>);\n  if (result.error) {\n    console.warn(result.error);\n    return (<div>`Error! ${result.error.message}`</div>);\n  }\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={result.data ? result.data.getPlayer.searchStr : ''} onChange={e => getPlayer({ variables: { searchStr: e.target.value }})  }/>\n      <br/>\n      <h3>{result.data ? result.data.getPlayer.name : ''}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}