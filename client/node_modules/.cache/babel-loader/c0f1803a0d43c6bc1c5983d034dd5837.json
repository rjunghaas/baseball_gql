{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query getPlayer($name: String!) {\\n    getPlayerId(name: $name) @client\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nconst PLAYER_ID_QUERY = gql(_templateObject());\nexport const resolvers = {\n  Mutation: {\n    setPlayerId: (_, {\n      searchStr\n    }, {\n      cache\n    }) => {\n      if (data) {\n        cache.writeData({\n          data: {\n            searchStr: searchStr,\n            name: data.getPlayer.name,\n            id: data.getPlayer.id\n          }\n        });\n      }\n\n      return {\n        searchStr,\n        name\n      };\n    }\n  },\n  Query: {\n    getPlayerId: (_, {\n      name\n    }, {\n      cache\n    }) => {\n      const _readQuery = readQuery(PLAYER_ID_QUERY),\n            error = _readQuery.error,\n            data = _readQuery.data;\n\n      if (error) {\n        console.warn(error);\n        return \"Error! \".concat(error.message);\n      }\n\n      if (!data) {\n        return 13110;\n      }\n\n      return data.id;\n    }\n  }\n};\nexport default resolvers;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/resolvers.ts"],"names":["gql","PLAYER_ID_QUERY","resolvers","Mutation","setPlayerId","_","searchStr","cache","data","writeData","name","getPlayer","id","Query","getPlayerId","readQuery","error","console","warn","message"],"mappings":";;;;;;;;;;;;AACA,SAASA,GAAT,QAAoB,cAApB;AAGA,MAAMC,eAAe,GAAGD,GAAH,mBAArB;AAcA,OAAO,MAAME,SAAS,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,CAAD,EAAY;AAAEC,MAAAA;AAAF,KAAZ,EAA8C;AAAEC,MAAAA;AAAF,KAA9C,KAAiE;AAE5E,UAAGC,IAAH,EAAQ;AACND,QAAAA,KAAK,CAACE,SAAN,CAAgB;AACdD,UAAAA,IAAI,EAAE;AACJF,YAAAA,SAAS,EAAEA,SADP;AAEJI,YAAAA,IAAI,EAAEF,IAAI,CAACG,SAAL,CAAeD,IAFjB;AAGJE,YAAAA,EAAE,EAAEJ,IAAI,CAACG,SAAL,CAAeC;AAHf;AADQ,SAAhB;AAOD;;AACD,aAAO;AAAEN,QAAAA,SAAF;AAAaI,QAAAA;AAAb,OAAP;AACD;AAbO,GADa;AAiBvBG,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE,CAACT,CAAD,EAAW;AAAEK,MAAAA;AAAF,KAAX,EAAyC;AAAEH,MAAAA;AAAF,KAAzC,KAA2D;AAAA,yBAC9CQ,SAAS,CAACd,eAAD,CADqC;AAAA,YAC9De,KAD8D,cAC9DA,KAD8D;AAAA,YACvDR,IADuD,cACvDA,IADuD;;AAGtE,UAAGQ,KAAH,EAAS;AACPC,QAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACA,gCAAiBA,KAAK,CAACG,OAAvB;AACD;;AAED,UAAG,CAACX,IAAJ,EAAS;AACP,eAAO,KAAP;AACD;;AAED,aAAOA,IAAI,CAACI,EAAZ;AACD;AAdI;AAjBgB,CAAlB;AAmCP,eAAeV,SAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst PLAYER_ID_QUERY = gql`\n  query getPlayer($name: String!) {\n    getPlayerId(name: $name) @client\n  }\n`;\n\ntype setPlayerQueryObj = {\n  searchStr: string\n};\n\ntype getPlayerIdQueryObj = {\n  name: string\n}\n\nexport const resolvers = {\n  Mutation: {\n    setPlayerId: (_: Object, { searchStr }: setPlayerQueryObj, { cache }: any) => {\n      \n      if(data){\n        cache.writeData({\n          data: {\n            searchStr: searchStr,\n            name: data.getPlayer.name,\n            id: data.getPlayer.id,\n          }\n        })\n      }\n      return { searchStr, name };\n    }\n  },\n\n  Query: {\n    getPlayerId: (_:Object, { name }:getPlayerIdQueryObj, { cache }:any) => {\n      const { error, data } = readQuery(PLAYER_ID_QUERY);\n\n      if(error){\n        console.warn(error);\n        return(`Error! ${error.message}`);\n      }\n\n      if(!data){\n        return 13110;\n      }\n\n      return data.id;\n    }\n  }\n};\n\nexport default resolvers;\n"]},"metadata":{},"sourceType":"module"}