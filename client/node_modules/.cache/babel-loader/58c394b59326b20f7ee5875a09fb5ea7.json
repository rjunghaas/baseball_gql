{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n  id @client\\n}\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query PlayerVorp($id: Int!){\\n    getPlayerVorp(id: $id, startDate: \\\"01/01/2018\\\", endDate: \\\"12/31/2018\\\"){\\n      vorp\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nconst VORP_QUERY = gql(_templateObject());\nconst ID_QUERY = gql(_templateObject2());\n/*const VORP_QUERY = gql`\n{\n  getPlayerVorp(id: 10155, startDate: \"01/01/2018\", endDate: \"12/31/2018\")\n  {\n    vorp\n  }\n}\n`;*/\n\n// helper function to validate string is in proper date format\nfunction validateDate(testdate) {\n  var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/;\n  return date_regex.test(testdate);\n}\n\nconst SubmitSearch = () => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n  const client = useApolloClient(); // on changing date fields, if valid date, then set state property for correct\n  // date.  Use reducer to handle these state changes\n\n  /*function setDate(dateType:string, date:string): any {\n    if (dateType === \"startDate\") {\n      if(validateDate(date)) {\n        // set startDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setStartDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateStartDate([date]));\n      }\n    } else if (dateType === \"endDate\"){\n      if(validateDate(date)) {\n        // set endDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setEndDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateEndDate([date]));\n      }\n    }\n  }*/\n  // Use refetch() in useQuery to trigger Query when Submit button pressed: https://www.apollographql.com/docs/react/data/queries/#refetching\n\n  const _useQuery = useQuery(VORP_QUERY, {\n    variables: {\n      id: 13110\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data,\n        refetch = _useQuery.refetch;\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Calculating...\"));\n\n  if (error) {\n    console.warn(error);\n    console.log(data);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  } // Upon pressing submit button, construct URL and make call to API.\n  // Take results and send to action creator to update state with new VORP\n\n  /*async function getVorp(id:number, startDate:string, endDate:string): Promise<any> {\n    let idStr = id.toString();\n    let url:string = VORP_URL  + idStr + \"&startDate=\" + startDate + \"&endDate=\" + endDate;\n     const response = await fetch(url);\n    const data = await response.json();\n    dispatch(baseballActions.vorpSuccess([startDate, endDate, data.message]));\n  }*/\n  // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n\n\n  console.log(data); // Using id local field as variable for getPlayerVorp Query:  https://www.apollographql.com/docs/react/data/local-state/#using-client-fields-as-variables\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Start Date for Player:\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), \" \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"End Date for Player: \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    name: \"submit\",\n    onClick: () => refetch(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"VORP: \", data.getPlayerVorp.vorp)));\n};\n\nexport default SubmitSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx"],"names":["React","gql","useQuery","useApolloClient","VORP_QUERY","ID_QUERY","validateDate","testdate","date_regex","test","SubmitSearch","client","variables","id","loading","error","data","refetch","console","warn","log","message","getPlayerVorp","vorp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,qBAA1C;AAEA,MAAMC,UAAU,GAAGH,GAAH,mBAAhB;AAQA,MAAMI,QAAQ,GAAGJ,GAAH,oBAAd;AAMA;;;;;;;;;AAiBA;AACA,SAASK,YAAT,CAAsBC,QAAtB,EAAwC;AACpC,MAAIC,UAAU,GAAG,yDAAjB;AACA,SAAOA,UAAU,CAACC,IAAX,CAAgBF,QAAhB,CAAP;AACH;;AAED,MAAMG,YAAY,GAAG,MAAW;AAC9B;AACA;AACA,QAAMC,MAAM,GAAGR,eAAe,EAA9B,CAH8B,CAK9B;AACA;;AACA;;;;;;;;;;;;;;;;;;;AAoBA;;AA3B8B,oBA4BYD,QAAQ,CAACE,UAAD,EAAa;AAACQ,IAAAA,SAAS,EAAE;AAACC,MAAAA,EAAE,EAAE;AAAL;AAAZ,GAAb,CA5BpB;AAAA,QA4BtBC,OA5BsB,aA4BtBA,OA5BsB;AAAA,QA4BbC,KA5Ba,aA4BbA,KA5Ba;AAAA,QA4BNC,IA5BM,aA4BNA,IA5BM;AAAA,QA4BAC,OA5BA,aA4BAA,OA5BA;;AA8B9B,MAAGH,OAAH,EAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAL,CAAP;;AACZ,MAAIC,KAAJ,EAAW;AACTG,IAAAA,OAAO,CAACC,IAAR,CAAaJ,KAAb;AACAG,IAAAA,OAAO,CAACE,GAAR,CAAYJ,IAAZ;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeD,KAAK,CAACM,OAArB,MAAR;AACD,GAnC6B,CAqC9B;AACA;;AACA;;;;;;;AASA;AACA;AACA;;;AACAH,EAAAA,OAAO,CAACE,GAAR,CAAYJ,IAAZ,EAnD8B,CAoD9B;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAN,OAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtC,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAM;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAN,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAN,EAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApC,CAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAM;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAN,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAoC,IAAA,IAAI,EAAC,QAAzC;AAAkD,IAAA,OAAO,EAAE,MAAMC,OAAO,EAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYD,IAAI,CAACM,aAAL,CAAmBC,IAA/B,CAAL,CAPJ,CADF;AAWD,CAhED;;AAkEA,eAAeb,YAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\n\nconst VORP_QUERY = gql`\n  query PlayerVorp($id: Int!){\n    getPlayerVorp(id: $id, startDate: \"01/01/2018\", endDate: \"12/31/2018\"){\n      vorp\n    }\n  }\n`;\n\nconst ID_QUERY = gql`\n{\n  id @client\n}\n`;\n\n/*const VORP_QUERY = gql`\n{\n  getPlayerVorp(id: 10155, startDate: \"01/01/2018\", endDate: \"12/31/2018\")\n  {\n    vorp\n  }\n}\n`;*/\n\ntype idQueryObj = {\n  id:number\n};\n\ntype vorpQueryObj = {\n  vorp: number\n}\n\n// helper function to validate string is in proper date format\nfunction validateDate(testdate: string) {\n    var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/ ;\n    return date_regex.test(testdate);\n}\n\nconst SubmitSearch = (): any => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n  const client = useApolloClient();\n\n  // on changing date fields, if valid date, then set state property for correct\n  // date.  Use reducer to handle these state changes\n  /*function setDate(dateType:string, date:string): any {\n    if (dateType === \"startDate\") {\n      if(validateDate(date)) {\n        // set startDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setStartDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateStartDate([date]));\n      }\n    } else if (dateType === \"endDate\"){\n      if(validateDate(date)) {\n        // set endDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setEndDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateEndDate([date]));\n      }\n    }\n  }*/\n\n  // Use refetch() in useQuery to trigger Query when Submit button pressed: https://www.apollographql.com/docs/react/data/queries/#refetching\n  const { loading, error, data, refetch } = useQuery(VORP_QUERY, {variables: {id: 13110}});\n\n  if(loading) return <div><h3>Calculating...</h3></div>;\n  if (error) {\n    console.warn(error);\n    console.log(data);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  // Upon pressing submit button, construct URL and make call to API.\n  // Take results and send to action creator to update state with new VORP\n  /*async function getVorp(id:number, startDate:string, endDate:string): Promise<any> {\n    let idStr = id.toString();\n    let url:string = VORP_URL  + idStr + \"&startDate=\" + startDate + \"&endDate=\" + endDate;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    dispatch(baseballActions.vorpSuccess([startDate, endDate, data.message]));\n  }*/\n\n  // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n  console.log(data);\n  // Using id local field as variable for getPlayerVorp Query:  https://www.apollographql.com/docs/react/data/local-state/#using-client-fields-as-variables\n  return (\n    <div>\n        <div> <h4>Start Date for Player:</h4> <br /> </div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" /></div>\n        <div> <h4>End Date for Player: </h4><br /></div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" /></div>\n        <div><input type=\"submit\" value=\"Submit\" name=\"submit\" onClick={() => refetch()}/></div>\n        <br />\n        <div><h3>VORP: { data.getPlayerVorp.vorp }</h3></div>\n    </div>\n  )\n}\n\nexport default SubmitSearch;\n"]},"metadata":{},"sourceType":"module"}