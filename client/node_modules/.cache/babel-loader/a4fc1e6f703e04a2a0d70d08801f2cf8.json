{"ast":null,"code":"var _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx\";\nimport React from \"react\";\nimport { baseballActions } from '../state';\nimport { useStateValue } from './BaseballApp';\nlet VORP_URL = \"http://192.168.1.67:5000/scrape?id=\"; // helper function to validate string is in proper date format\n\nfunction validateDate(testdate) {\n  var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/;\n  return date_regex.test(testdate);\n}\n\nconst SubmitSearch = () => {\n  // connect to our context so that we can access state values\n  const _useStateValue = useStateValue(),\n        state = _useStateValue.state,\n        dispatch = _useStateValue.dispatch; // on changing date fields, if valid date, then set state property for correct\n  // date.  Use reducer to handle these state changes\n\n\n  function setDate(dateType, date) {\n    if (dateType === \"startDate\") {\n      if (validateDate(date)) {\n        let dateArr = [date];\n        dispatch(baseballActions.setStartDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateStartDate([date]));\n      }\n    } else if (dateType === \"endDate\") {\n      if (validateDate(date)) {\n        let dateArr = [date];\n        dispatch(baseballActions.setEndDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateEndDate([date]));\n      }\n    }\n  } // Upon pressing submit button, construct URL and make call to API.\n  // Take results and send to action creator to update state with new VORP\n\n\n  async function getVorp(id, startDate, endDate) {\n    let idStr = id.toString();\n    let url = VORP_URL + idStr + \"&startDate=\" + startDate + \"&endDate=\" + endDate;\n    const response = await fetch(url);\n    const data = await response.json();\n    dispatch(baseballActions.vorpSuccess([startDate, endDate, data.message]));\n  } // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Start Date for Player:\"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), \" \"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    value: state.startDateStr,\n    onChange: e => setDate(\"startDate\", e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \" \", React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"End Date for Player: \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" \", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"MM/DD/YYYY\",\n    value: state.endDateStr,\n    onChange: e => setDate(\"endDate\", e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    name: \"submit\",\n    onClick: () => getVorp(state.id, state.startDate, state.endDate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"VORP: \", state.vorp.toFixed(2))));\n};\n\nexport default SubmitSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx"],"names":["React","baseballActions","useStateValue","VORP_URL","validateDate","testdate","date_regex","test","SubmitSearch","state","dispatch","setDate","dateType","date","dateArr","setStartDate","updateStartDate","setEndDate","updateEndDate","getVorp","id","startDate","endDate","idStr","toString","url","response","fetch","data","json","vorpSuccess","message","startDateStr","e","target","value","endDateStr","vorp","toFixed"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { baseballActions } from '../state';\nimport { useStateValue } from './BaseballApp';\n\nlet VORP_URL: string = \"http://192.168.1.67:5000/scrape?id=\";\n\n// helper function to validate string is in proper date format\nfunction validateDate(testdate: string) {\n    var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/ ;\n    return date_regex.test(testdate);\n}\n\nconst SubmitSearch = (): any => {\n  // connect to our context so that we can access state values\n  const {state, dispatch} = useStateValue();\n\n  // on changing date fields, if valid date, then set state property for correct\n  // date.  Use reducer to handle these state changes\n  function setDate(dateType:string, date:string): any {\n    if (dateType === \"startDate\") {\n      if(validateDate(date)) {\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setStartDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateStartDate([date]));\n      }\n    } else if (dateType === \"endDate\"){\n      if(validateDate(date)) {\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setEndDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateEndDate([date]));\n      }\n    }\n  }\n\n  // Upon pressing submit button, construct URL and make call to API.\n  // Take results and send to action creator to update state with new VORP\n  async function getVorp(id:number, startDate:string, endDate:string): Promise<any> {\n    let idStr = id.toString();\n    let url:string = VORP_URL  + idStr + \"&startDate=\" + startDate + \"&endDate=\" + endDate;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    dispatch(baseballActions.vorpSuccess([startDate, endDate, data.message]));\n  }\n\n  // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n  return (\n    <div>\n        <div> <h4>Start Date for Player:</h4> <br /> </div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" value={ state.startDateStr } onChange = { (e) => setDate(\"startDate\", e.target.value) } /></div>\n        <div> <h4>End Date for Player: </h4><br /></div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" value={ state.endDateStr } onChange = { (e) => setDate(\"endDate\", e.target.value) } /></div>\n        <div><input type=\"submit\" value=\"Submit\" name=\"submit\" onClick = { () => getVorp(state.id, state.startDate, state.endDate) }/></div>\n        <br />\n        <div><h3>VORP: { state.vorp.toFixed(2) }</h3></div>\n    </div>\n  )\n}\n\nexport default SubmitSearch;\n"]},"metadata":{},"sourceType":"module"}