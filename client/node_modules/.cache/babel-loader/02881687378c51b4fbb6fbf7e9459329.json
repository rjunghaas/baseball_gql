{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useQuery() hook to pass in text values\n\n  const _useLazyQuery = useLazyQuery(PLAYER_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        getPlayer = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        loading = _useLazyQuery2$.loading,\n        error = _useLazyQuery2$.error,\n        data = _useLazyQuery2$.data;\n\n  console.log(data);\n  let name = '';\n  let searchStr = ''; //const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: 'Marcus Se'}});\n  // handle return and error states\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"'Loading...'\");\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  } // Cache results from our GraphQL query\n\n\n  if (data) {\n    name = data.getPlayer.name;\n    let playerText = data.getPlayer.name;\n    console.log(playerText);\n    client.writeData({\n      data: {\n        searchStr: data.getPlayer.searchStr,\n        name: data.getPlayer.name,\n        id: data.getPlayer.id\n      }\n    });\n  } // Render JSX element and insert data\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: data ? data.getPlayer.searchStr : '',\n    onChange: e => getPlayer({\n      variables: {\n        searchStr: e.target.value\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, name));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","PLAYER_QUERY","NameSearch","client","getPlayer","loading","error","data","console","log","name","searchStr","warn","message","playerText","writeData","id","e","variables","target","value"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAAmBC,YAAnB,EAAiCC,eAAjC,QAAwD,qBAAxD;AAGA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CAFyB,CAIzB;;AAJyB,wBAKmBD,YAAY,CAACE,YAAD,CAL/B;AAAA;AAAA,QAKlBG,SALkB;AAAA;AAAA,QAKNC,OALM,mBAKNA,OALM;AAAA,QAKGC,KALH,mBAKGA,KALH;AAAA,QAKUC,IALV,mBAKUA,IALV;;AAMzBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,MAAIG,IAAI,GAAG,EAAX;AACA,MAAIC,SAAS,GAAG,EAAhB,CARyB,CAUzB;AAEA;;AACA,MAAIN,OAAJ,EAAa,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;;AACb,MAAIC,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACI,IAAR,CAAaN,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACO,OAArB,MAAR;AACD,GAjBwB,CAmBzB;;;AACA,MAAIN,IAAJ,EAAU;AACRG,IAAAA,IAAI,GAAGH,IAAI,CAACH,SAAL,CAAeM,IAAtB;AACA,QAAII,UAAiB,GAAGP,IAAI,CAACH,SAAL,CAAeM,IAAvC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AAEAX,IAAAA,MAAM,CAACY,SAAP,CAAiB;AACfR,MAAAA,IAAI,EAAE;AACJI,QAAAA,SAAS,EAAEJ,IAAI,CAACH,SAAL,CAAeO,SADtB;AAEJD,QAAAA,IAAI,EAAEH,IAAI,CAACH,SAAL,CAAeM,IAFjB;AAGJM,QAAAA,EAAE,EAAET,IAAI,CAACH,SAAL,CAAeY;AAHf;AADS,KAAjB;AAOD,GAhCwB,CAkCzB;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAET,IAAI,GAAGA,IAAI,CAACH,SAAL,CAAeO,SAAlB,GAA8B,EAAlF;AAAsF,IAAA,QAAQ,EAAEM,CAAC,IAAIb,SAAS,CAAC;AAAEc,MAAAA,SAAS,EAAE;AAAEP,QAAAA,SAAS,EAAEM,CAAC,CAACE,MAAF,CAASC;AAAtB;AAAb,KAAD,CAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKV,IAAL,CAHF,CADF;AAOD;;AAAA;AAED,eAAeR,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nimport { typeDefs } from './BaseballApp';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useQuery() hook to pass in text values\n  const [getPlayer, {loading, error, data}] = useLazyQuery(PLAYER_QUERY);\n  console.log(data);\n  let name = '';\n  let searchStr = ''\n\n  //const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: 'Marcus Se'}});\n\n  // handle return and error states\n  if (loading) return (<div>'Loading...'</div>);\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  // Cache results from our GraphQL query\n  if (data) {\n    name = data.getPlayer.name;\n    let playerText:string = data.getPlayer.name\n    console.log(playerText);\n\n    client.writeData({\n      data: {\n        searchStr: data.getPlayer.searchStr,\n        name: data.getPlayer.name,\n        id: data.getPlayer.id,\n      }\n    });\n  }\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={data ? data.getPlayer.searchStr : ''} onChange={e => getPlayer({ variables: { searchStr: e.target.value }})  }/>\n      <br/>\n      <h3>{name}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}