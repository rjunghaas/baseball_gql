{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useQuery() hook to pass in text values\n  //const [getPlayerQuery, { loading, error, data }] = useLazyQuery(PLAYER_QUERY);\n  //console.log(getPlayerQuery);\n  //console.log(data);\n  //getPlayerQuery({variables: {searchStr: 'Marcus Semien'}});\n  //console.log(data);\n\n  const _useQuery = useQuery(PLAYER_QUERY, {\n    variables: {\n      searchStr: 'Marcus Se'\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data; // handle return and error states\n\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"'Loading...'\");\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  } // Cache results from our GraphQL query\n\n\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id\n    }\n  }); // Render JSX element and insert data\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: data.getPlayer.searchStr,\n    onChange: e => e.preventDefault(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, data.getPlayer.name));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useApolloClient","PLAYER_QUERY","NameSearch","client","useQuery","variables","searchStr","loading","error","data","console","warn","message","writeData","getPlayer","name","id","e","preventDefault"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAAuBC,eAAvB,QAA8C,qBAA9C;AAGA,MAAMC,YAAY,GAAGF,GAAH,mBAAlB;;AAgBA;AACA;AACA,SAASG,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CAFyB,CAIzB;AACA;AACA;AACA;AACA;AACA;;AATyB,oBAWQI,QAAQ,CAACH,YAAD,EAAe;AAACI,IAAAA,SAAS,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ;AAAZ,GAAf,CAXhB;AAAA,QAWjBC,OAXiB,aAWjBA,OAXiB;AAAA,QAWRC,KAXQ,aAWRA,KAXQ;AAAA,QAWDC,IAXC,aAWDA,IAXC,EAazB;;;AACA,MAAIF,OAAJ,EAAa,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;;AACb,MAAIC,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACC,IAAR,CAAaH,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACI,OAArB,MAAR;AACD,GAlBwB,CAoBzB;;;AACAT,EAAAA,MAAM,CAACU,SAAP,CAAiB;AACfJ,IAAAA,IAAI,EAAE;AACJH,MAAAA,SAAS,EAAEG,IAAI,CAACK,SAAL,CAAeR,SADtB;AAEJS,MAAAA,IAAI,EAAEN,IAAI,CAACK,SAAL,CAAeC,IAFjB;AAGJC,MAAAA,EAAE,EAAEP,IAAI,CAACK,SAAL,CAAeE;AAHf;AADS,GAAjB,EArByB,CA6BzB;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAEP,IAAI,CAACK,SAAL,CAAeR,SAA/D;AAA0E,IAAA,QAAQ,EAAEW,CAAC,IAAEA,CAAC,CAACC,cAAF,EAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,IAAI,CAACK,SAAL,CAAeC,IAApB,CAHF,CADF;AAOD;;AAAA;AAED,eAAeb,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nimport { typeDefs } from './BaseballApp';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\ntype playerQueryObj = {\n  searchStr: string,\n  name: string,\n  id: number\n};\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useQuery() hook to pass in text values\n  //const [getPlayerQuery, { loading, error, data }] = useLazyQuery(PLAYER_QUERY);\n  //console.log(getPlayerQuery);\n  //console.log(data);\n  //getPlayerQuery({variables: {searchStr: 'Marcus Semien'}});\n  //console.log(data);\n\n  const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: 'Marcus Se'}});\n\n  // handle return and error states\n  if (loading) return (<div>'Loading...'</div>);\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  // Cache results from our GraphQL query\n  client.writeData({\n    data: {\n      searchStr: data.getPlayer.searchStr,\n      name: data.getPlayer.name,\n      id: data.getPlayer.id,\n    }\n  });\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={data.getPlayer.searchStr} onChange={e=>e.preventDefault() }/>\n      <br/>\n      <h3>{data.getPlayer.name}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}