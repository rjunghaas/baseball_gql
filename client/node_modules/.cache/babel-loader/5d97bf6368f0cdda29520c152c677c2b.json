{"ast":null,"code":"var _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\nimport React from \"react\"; //import { baseballActions } from '../state';\n//import { useStateValue } from './BaseballApp';\n\nlet NAME_SEARCH_URL = \"http://192.168.1.67:5000/player?str=\"; // NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\nconst NameSearch = () => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n  // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n\n  /*async function getName(searchText:string): Promise<any> {\n    let str:string = searchText;\n    let url:string = NAME_SEARCH_URL + str;\n     const response = await fetch(url);\n    const data = await response.json();\n    // Once response received, convert to JSON and dispatch to action creator\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  }*/\n  // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: '',\n    onChange: e => console.log(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"test\"));\n};\n/*const NameSearch = (): any => {\n  return <div />\n}*/\n\n\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","NAME_SEARCH_URL","NameSearch","e","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,IAAIC,eAAuB,GAAG,sCAA9B,C,CAEA;AACA;;AACA,MAAMC,UAAU,GAAG,MAAW;AAC5B;AACA;AAEA;AACA;;AACA;;;;;;;;AAUA;AACA;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAG,EAAjD;AAAsD,IAAA,QAAQ,EAAEC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,MAAN,CAHF,CADF;AAOD,CAzBD;AA2BA;;;;;AAIA,eAAeD,UAAf","sourcesContent":["import React from \"react\";\n//import { baseballActions } from '../state';\n//import { useStateValue } from './BaseballApp';\nlet NAME_SEARCH_URL: string = \"http://192.168.1.67:5000/player?str=\"\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nconst NameSearch = (): any => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n\n  // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n  /*async function getName(searchText:string): Promise<any> {\n    let str:string = searchText;\n    let url:string = NAME_SEARCH_URL + str;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    // Once response received, convert to JSON and dispatch to action creator\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  }*/\n\n  // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={ '' } onChange={e => console.log(e)} />\n      <br />\n      <h3>{ \"test\" }</h3>\n    </div>\n  );\n};\n\n/*const NameSearch = (): any => {\n  return <div />\n}*/\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}