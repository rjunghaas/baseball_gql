{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation setPlayer($searchStr: String!) {\\n    setPlayerId(searchStr: $searchStr)\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useMutation, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_MUTATION = gql(_templateObject()); // NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n  let cache = client.cache;\n\n  const _useMutation = useMutation(PLAYER_MUTATION, {\n    variables: {\n      searchStr\n    }\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        setPlayerId = _useMutation2[0],\n        data = _useMutation2[1].data; // Render JSX element and insert data\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter Player's Name\",\n    value: data ? data.searchStr : '',\n    onChange: e => {\n      e.preventDefault();\n      setPlayerId({\n        searchStr: e.target.value\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, data ? data.name : ''));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useMutation","useApolloClient","PLAYER_MUTATION","NameSearch","client","cache","variables","searchStr","setPlayerId","data","e","preventDefault","target","value","name"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,qBAA7C;AAEA,MAAMC,eAAe,GAAGH,GAAH,mBAArB,C,CAMA;AACA;;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B;AACA,MAAII,KAAK,GAAGD,MAAM,CAACC,KAAnB;;AAHyB,uBAKOL,WAAW,CAACE,eAAD,EAAkB;AAACI,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAAZ,GAAlB,CALlB;AAAA;AAAA,QAKlBC,WALkB;AAAA,QAKHC,IALG,oBAKHA,IALG,EAOzB;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,qBAA/B;AAAqD,IAAA,KAAK,EAAEA,IAAI,GAAGA,IAAI,CAACF,SAAR,GAAoB,EAApF;AAAwF,IAAA,QAAQ,EAAEG,CAAC,IAAI;AAACA,MAAAA,CAAC,CAACC,cAAF;AAAoBH,MAAAA,WAAW,CAAC;AAAED,QAAAA,SAAS,EAAEG,CAAC,CAACE,MAAF,CAASC;AAAtB,OAAD,CAAX;AAA2C,KAAvK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,IAAI,GAAGA,IAAI,CAACK,IAAR,GAAe,EAAxB,CAHF,CADF;AAOD;;AAAA;AAED,eAAeX,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useMutation, useApolloClient } from '@apollo/react-hooks';\n\nconst PLAYER_MUTATION = gql`\n  mutation setPlayer($searchStr: String!) {\n    setPlayerId(searchStr: $searchStr)\n  }\n`;\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n  let cache = client.cache;\n\n  const [setPlayerId, { data }] = useMutation(PLAYER_MUTATION, {variables: { searchStr }});\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input type=\"text\" placeholder=\"Enter Player's Name\" value={data ? data.searchStr : ''} onChange={e => {e.preventDefault(); setPlayerId({ searchStr: e.target.value })}}/>\n      <br/>\n      <h3>{data ? data.name : ''}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}