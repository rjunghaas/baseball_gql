{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_ts/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_ts/webapp-hooks/src/components/BaseballApp.tsx\";\nimport React, { useReducer, createContext, useContext } from 'react';\nimport NameSearch from './NameSearch';\nimport SubmitSearch from './submitData';\nimport { initialState } from '../state';\nimport { reducer } from '../reducer';\nimport '../application.css';\n// instantiate context with properties\nconst StateContext = createContext({}); // main function - note app is not a functional component as we had with redux\n\nfunction BaseballApp() {\n  // set up useReducer hook with our reducer and initialState\n  // any actions received by reducer from now on will create a new state\n  const _useReducer = useReducer(reducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // wrap our app with StateContext so that all components have access to state\n\n\n  return React.createElement(StateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(NameSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(SubmitSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })));\n} // add hot updates\n\n\nif (module.hot) {\n  module.hot.accept();\n} // set up useContext hook here for state\n\n\nexport const useStateValue = () => useContext(StateContext);\nexport default BaseballApp;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_ts/webapp-hooks/src/components/BaseballApp.tsx"],"names":["React","useReducer","createContext","useContext","NameSearch","SubmitSearch","initialState","reducer","StateContext","BaseballApp","state","dispatch","module","hot","accept","useStateValue"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,EAA2CC,UAA3C,QAAuE,OAAvE;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAAiCC,YAAjC,QAAqD,UAArD;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAO,oBAAP;AASA;AACA,MAAMC,YAAY,GAAGN,aAAa,CAAC,EAAD,CAAlC,C,CAEA;;AACA,SAASO,WAAT,GAA4B;AAC1B;AACA;AAF0B,sBAGAR,UAAU,CAACM,OAAD,EAAUD,YAAV,CAHV;AAAA;AAAA,QAGnBI,KAHmB;AAAA,QAGZC,QAHY,oBAK1B;;;AACA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACD,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF;AASD,C,CAED;;;AACA,IAAGC,MAAM,CAACC,GAAV,EAAc;AACZD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD,C,CAED;;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAMZ,UAAU,CAACK,YAAD,CAAtC;AACP,eAAeC,WAAf","sourcesContent":["import React, { useReducer, createContext, useContext, Dispatch } from 'react';\nimport NameSearch from './NameSearch';\nimport SubmitSearch from './submitData';\nimport { state, actionInterface, initialState } from '../state';\nimport { reducer } from '../reducer';\nimport '../application.css'\ndeclare let module: any;\n\n// define context properties\ninterface IContextProps {\n  state: state,\n  dispatch: Dispatch<actionInterface>;\n}\n\n// instantiate context with properties\nconst StateContext = createContext({} as IContextProps);\n\n// main function - note app is not a functional component as we had with redux\nfunction BaseballApp(): any {\n  // set up useReducer hook with our reducer and initialState\n  // any actions received by reducer from now on will create a new state\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // wrap our app with StateContext so that all components have access to state\n  return (\n    <StateContext.Provider value={{state, dispatch}}>\n      <div className=\"app\">\n        <NameSearch />\n        <br />\n        <SubmitSearch />\n        </div>\n    </StateContext.Provider>\n  );\n}\n\n// add hot updates\nif(module.hot){\n  module.hot.accept();\n}\n\n// set up useContext hook here for state\nexport const useStateValue = () => useContext(StateContext);\nexport default BaseballApp\n"]},"metadata":{},"sourceType":"module"}