{"ast":null,"code":"var _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\nimport React from \"react\";\nimport { baseballActions } from '../state';\nimport { useStateValue } from './BaseballApp';\nlet NAME_SEARCH_URL = \"http://192.168.1.67:5000/player?str=\"; // NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\nconst NameSearch = () => {\n  // connect to our context so that we can access state values\n  const _useStateValue = useStateValue(),\n        state = _useStateValue.state,\n        dispatch = _useStateValue.dispatch; // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n\n\n  async function getName(searchText) {\n    let str = searchText;\n    let url = NAME_SEARCH_URL + str;\n    const response = await fetch(url);\n    const data = await response.json(); // Once response received, convert to JSON and dispatch to action creator\n\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  } // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: state.str,\n    onChange: e => getName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, state.nm));\n};\n\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","baseballActions","useStateValue","NAME_SEARCH_URL","NameSearch","state","dispatch","getName","searchText","str","url","response","fetch","data","json","matchSuccess","message","e","target","value","nm"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,IAAIC,eAAuB,GAAG,sCAA9B,C,CAEA;AACA;;AACA,MAAMC,UAAU,GAAG,MAAW;AAC5B;AAD4B,yBAEFF,aAAa,EAFX;AAAA,QAErBG,KAFqB,kBAErBA,KAFqB;AAAA,QAEdC,QAFc,kBAEdA,QAFc,EAI5B;AACA;;;AACA,iBAAeC,OAAf,CAAuBC,UAAvB,EAAwD;AACtD,QAAIC,GAAU,GAAGD,UAAjB;AACA,QAAIE,GAAU,GAAGP,eAAe,GAAGM,GAAnC;AAEA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CALsD,CAMtD;;AACAR,IAAAA,QAAQ,CAACL,eAAe,CAACc,YAAhB,CAA6B,CAACF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAD,EAAkBP,GAAlB,EAAuBI,IAAI,CAACG,OAAL,CAAa,CAAb,CAAvB,CAA7B,CAAD,CAAR;AACD,GAd2B,CAgB5B;AACA;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAGX,KAAK,CAACI,GAAvD;AAA6D,IAAA,QAAQ,EAAEQ,CAAC,IAAIV,OAAO,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMd,KAAK,CAACe,EAAZ,CAHF,CADF;AAOD,CAzBD;;AA2BA,eAAehB,UAAf","sourcesContent":["import React from \"react\";\nimport { baseballActions } from '../state';\nimport { useStateValue } from './BaseballApp';\nlet NAME_SEARCH_URL: string = \"http://192.168.1.67:5000/player?str=\"\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nconst NameSearch = (): any => {\n  // connect to our context so that we can access state values\n  const {state, dispatch} = useStateValue();\n\n  // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n  async function getName(searchText:string): Promise<any> {\n    let str:string = searchText;\n    let url:string = NAME_SEARCH_URL + str;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    // Once response received, convert to JSON and dispatch to action creator\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  }\n\n  // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={ state.str } onChange={e => getName(e.target.value)} />\n      <br />\n      <h3>{ state.nm }</h3>\n    </div>\n  );\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}