{"ast":null,"code":"import _defineProperty from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { actionTypes } from './state'; // Reducer which will update correct keys in state when actions are received\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.NAME_MATCH_FOUND:\n      return _objectSpread({}, state, {\n        nm: action.payload[0],\n        str: action.payload[1],\n        id: parseInt(action.payload[2])\n      });\n\n    case actionTypes.SET_START_DATE:\n      return _objectSpread({}, state, {\n        startDate: action.payload[0],\n        startDateStr: action.payload[0]\n      });\n\n    case actionTypes.SET_END_DATE:\n      return _objectSpread({}, state, {\n        endDate: action.payload[0],\n        endDateStr: action.payload[0]\n      });\n\n    case actionTypes.VORP_SUCCESS:\n      return _objectSpread({}, state, {\n        startDate: action.payload[0],\n        endDate: action.payload[1],\n        vorp: parseFloat(action.payload[2])\n      });\n\n    case actionTypes.UPDATE_START_DATE:\n      return _objectSpread({}, state, {\n        startDateStr: action.payload[0]\n      });\n\n    case actionTypes.UPDATE_END_DATE:\n      return _objectSpread({}, state, {\n        endDateStr: action.payload[0]\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/reducer.ts"],"names":["actionTypes","reducer","state","action","type","NAME_MATCH_FOUND","nm","payload","str","id","parseInt","SET_START_DATE","startDate","startDateStr","SET_END_DATE","endDate","endDateStr","VORP_SUCCESS","vorp","parseFloat","UPDATE_START_DATE","UPDATE_END_DATE"],"mappings":";;;;;;AAAA,SAAiCA,WAAjC,QAAoD,SAApD,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAkD;AACvE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKJ,WAAW,CAACK,gBAAjB;AACE,+BAAWH,KAAX;AAAkBI,QAAAA,EAAE,EAAEH,MAAM,CAACI,OAAP,CAAe,CAAf,CAAtB;AAAyCC,QAAAA,GAAG,EAAEL,MAAM,CAACI,OAAP,CAAe,CAAf,CAA9C;AAAiEE,QAAAA,EAAE,EAAEC,QAAQ,CAACP,MAAM,CAACI,OAAP,CAAe,CAAf,CAAD;AAA7E;;AACF,SAAKP,WAAW,CAACW,cAAjB;AACE,+BAAWT,KAAX;AAAkBU,QAAAA,SAAS,EAAET,MAAM,CAACI,OAAP,CAAe,CAAf,CAA7B;AAAgDM,QAAAA,YAAY,EAAEV,MAAM,CAACI,OAAP,CAAe,CAAf;AAA9D;;AACF,SAAKP,WAAW,CAACc,YAAjB;AACE,+BAAWZ,KAAX;AAAkBa,QAAAA,OAAO,EAAEZ,MAAM,CAACI,OAAP,CAAe,CAAf,CAA3B;AAA8CS,QAAAA,UAAU,EAAEb,MAAM,CAACI,OAAP,CAAe,CAAf;AAA1D;;AACF,SAAKP,WAAW,CAACiB,YAAjB;AACE,+BAAWf,KAAX;AAAkBU,QAAAA,SAAS,EAAET,MAAM,CAACI,OAAP,CAAe,CAAf,CAA7B;AAAgDQ,QAAAA,OAAO,EAAEZ,MAAM,CAACI,OAAP,CAAe,CAAf,CAAzD;AAA4EW,QAAAA,IAAI,EAAEC,UAAU,CAAChB,MAAM,CAACI,OAAP,CAAe,CAAf,CAAD;AAA5F;;AACF,SAAKP,WAAW,CAACoB,iBAAjB;AACE,+BAAWlB,KAAX;AAAkBW,QAAAA,YAAY,EAAEV,MAAM,CAACI,OAAP,CAAe,CAAf;AAAhC;;AACF,SAAKP,WAAW,CAACqB,eAAjB;AACE,+BAAWnB,KAAX;AAAkBc,QAAAA,UAAU,EAAEb,MAAM,CAACI,OAAP,CAAe,CAAf;AAA9B;;AACF;AACE,aAAOL,KAAP;AAdJ;AAgBD,CAjBM","sourcesContent":["import { state, actionInterface, actionTypes } from './state';\n\n// Reducer which will update correct keys in state when actions are received\nexport const reducer = (state: state, action: actionInterface): state => {\n  switch(action.type) {\n    case actionTypes.NAME_MATCH_FOUND:\n      return {...state, nm: action.payload[0], str: action.payload[1], id: parseInt(action.payload[2])}\n    case actionTypes.SET_START_DATE:\n      return {...state, startDate: action.payload[0], startDateStr: action.payload[0]}\n    case actionTypes.SET_END_DATE:\n      return {...state, endDate: action.payload[0], endDateStr: action.payload[0]}\n    case actionTypes.VORP_SUCCESS:\n      return {...state, startDate: action.payload[0], endDate: action.payload[1], vorp: parseFloat(action.payload[2])}\n    case actionTypes.UPDATE_START_DATE:\n      return {...state, startDateStr: action.payload[0]}\n    case actionTypes.UPDATE_END_DATE:\n      return {...state, endDateStr: action.payload[0]}\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}