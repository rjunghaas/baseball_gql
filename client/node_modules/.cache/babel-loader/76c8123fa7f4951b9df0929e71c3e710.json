{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query getPlayer($name: String!) {\\n    getPlayerId(name: $name) @client\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\nquery PlayerId($searchStr: String!){\\n  getPlayer(searchStr: $searchStr){\\n    searchStr\\n    name\\n    id\\n  }\\n}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject());\nconst PLAYER_ID_QUERY = gql(_templateObject2());\nexport const resolvers = {\n  Mutation: {\n    setPlayerId: (_, {\n      searchStr\n    }, {\n      cache\n    }) => {\n      // Need to use searchStr to fetch { name, id } remotely\n      const _useQuery = useQuery(PLAYER_QUERY, {\n        variables: {\n          searchStr: searchStr\n        }\n      }),\n            data = _useQuery.data;\n\n      let name = data.getPlayer.name;\n      let id = data.getPlayer.id;\n      cache.writeData({\n        data: {\n          searchStr: searchStr,\n          name: name,\n          id: id\n        }\n      });\n      return {\n        searchStr,\n        name\n      };\n    }\n  }\n};\nexport default resolvers;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/resolvers.ts"],"names":["gql","useQuery","PLAYER_QUERY","PLAYER_ID_QUERY","resolvers","Mutation","setPlayerId","_","searchStr","cache","variables","data","name","getPlayer","id","writeData"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,MAAMC,YAAY,GAAGF,GAAH,mBAAlB;AAUA,MAAMG,eAAe,GAAGH,GAAH,oBAArB;AAcA,OAAO,MAAMI,SAAS,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,CAAD,EAAY;AAAEC,MAAAA;AAAF,KAAZ,EAA8C;AAAEC,MAAAA;AAAF,KAA9C,KAAiE;AAE9E;AAF8E,wBAG7DR,QAAQ,CAACC,YAAD,EAAe;AAACQ,QAAAA,SAAS,EAAE;AAAEF,UAAAA,SAAS,EAAEA;AAAb;AAAZ,OAAf,CAHqD;AAAA,YAGtEG,IAHsE,aAGtEA,IAHsE;;AAI9E,UAAIC,IAAW,GAAGD,IAAI,CAACE,SAAL,CAAeD,IAAjC;AACA,UAAIE,EAAS,GAAGH,IAAI,CAACE,SAAL,CAAeC,EAA/B;AAEAL,MAAAA,KAAK,CAACM,SAAN,CAAgB;AACdJ,QAAAA,IAAI,EAAE;AACJH,UAAAA,SAAS,EAAEA,SADP;AAEJI,UAAAA,IAAI,EAAEA,IAFF;AAGJE,UAAAA,EAAE,EAAEA;AAHA;AADQ,OAAhB;AAOA,aAAO;AAAEN,QAAAA,SAAF;AAAaI,QAAAA;AAAb,OAAP;AACC;AAhBO;AADa,CAAlB;AAqBP,eAAeR,SAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst PLAYER_QUERY = gql`\nquery PlayerId($searchStr: String!){\n  getPlayer(searchStr: $searchStr){\n    searchStr\n    name\n    id\n  }\n}\n`;\n\nconst PLAYER_ID_QUERY = gql`\n  query getPlayer($name: String!) {\n    getPlayerId(name: $name) @client\n  }\n`;\n\ntype setPlayerQueryObj = {\n  searchStr: String,\n};\n\ntype getPlayerIdQueryObj = {\n  name: string\n}\n\nexport const resolvers = {\n  Mutation: {\n    setPlayerId: (_: Object, { searchStr }: setPlayerQueryObj, { cache }: any) => {\n\n    // Need to use searchStr to fetch { name, id } remotely\n    const { data } = useQuery(PLAYER_QUERY, {variables: { searchStr: searchStr }})\n    let name:string = data.getPlayer.name;\n    let id:number = data.getPlayer.id;\n\n    cache.writeData({\n      data: {\n        searchStr: searchStr,\n        name: name,\n        id: id\n      }\n    });\n    return { searchStr, name };\n    }\n  }\n};\n\nexport default resolvers;\n"]},"metadata":{},"sourceType":"module"}