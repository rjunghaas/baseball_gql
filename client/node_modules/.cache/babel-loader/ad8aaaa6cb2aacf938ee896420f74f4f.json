{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/BaseballApp.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  type Player {\\n    searchStr:String @client\\n    name:String @client\\n    id:Number @client\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n//import React, { useReducer, createContext, useContext, Dispatch } from 'react';\nimport React from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport NameSearch from './NameSearch'; //import SubmitSearch from './submitData';\n\nimport '../application.css';\nexport const typeDefs = gql(_templateObject()); // Instantiate cache and Apollo client\n\nlet cache = new InMemoryCache();\nconst client = new ApolloClient({\n  uri: 'http://192.168.1.67:5000',\n  cache: cache\n}); // Initialize cache data\n\ncache.writeData({\n  data: {\n    searchStr: '',\n    name: '',\n    id: null\n  }\n}); // GraphQL query\n\n/*client.query({\n  query: gql`\n  {\n    getPlayer(searchStr: \"Christian Yelich\") {\n      name\n      id\n    }\n  }\n  `\n}).then(result => console.log(result.data.getPlayer.id));*/\n// main function - note app is not a functional component as we had with redux\n\nfunction BaseballApp() {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(NameSearch, {\n    context: context.cache,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })));\n} // add hot updates\n\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nexport default BaseballApp;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/BaseballApp.tsx"],"names":["React","ApolloClient","gql","ApolloProvider","InMemoryCache","NameSearch","typeDefs","cache","client","uri","writeData","data","searchStr","name","id","BaseballApp","context","module","hot","accept"],"mappings":";;;;;;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CACA;;AACA,OAAO,oBAAP;AAGA,OAAO,MAAMC,QAAQ,GAAGJ,GAAH,mBAAd,C,CAQP;;AACA,IAAIK,KAAK,GAAG,IAAIH,aAAJ,EAAZ;AACA,MAAMI,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC9BQ,EAAAA,GAAG,EAAE,0BADyB;AAE9BF,EAAAA,KAAK,EAAEA;AAFuB,CAAjB,CAAf,C,CAKA;;AACAA,KAAK,CAACG,SAAN,CAAgB;AACdC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE,EADP;AAEJC,IAAAA,IAAI,EAAE,EAFF;AAGJC,IAAAA,EAAE,EAAE;AAHA;AADQ,CAAhB,E,CASA;;AACA;;;;;;;;;;AAWA;;AACA,SAASC,WAAT,GAA4B;AAC1B,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEP,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEQ,OAAO,CAACT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD,C,CAED;;;AACA,IAAGU,MAAM,CAACC,GAAV,EAAc;AACZD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD;;AAED,eAAeJ,WAAf","sourcesContent":["//import React, { useReducer, createContext, useContext, Dispatch } from 'react';\nimport React from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport NameSearch from './NameSearch';\n//import SubmitSearch from './submitData';\nimport '../application.css'\ndeclare let module: any;\n\nexport const typeDefs = gql`\n  type Player {\n    searchStr:String @client\n    name:String @client\n    id:Number @client\n  }\n`;\n\n// Instantiate cache and Apollo client\nlet cache = new InMemoryCache();\nconst client = new ApolloClient({\n  uri: 'http://192.168.1.67:5000',\n  cache: cache,\n});\n\n// Initialize cache data\ncache.writeData({\n  data: {\n    searchStr: '',\n    name: '',\n    id: null\n  },\n});\n\n\n// GraphQL query\n/*client.query({\n  query: gql`\n  {\n    getPlayer(searchStr: \"Christian Yelich\") {\n      name\n      id\n    }\n  }\n  `\n}).then(result => console.log(result.data.getPlayer.id));*/\n\n// main function - note app is not a functional component as we had with redux\nfunction BaseballApp(): any {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"app\">\n        <NameSearch context={context.cache}/>\n        <br />\n        </div>\n    </ApolloProvider>\n  );\n}\n\n// add hot updates\nif(module.hot){\n  module.hot.accept();\n}\n\nexport default BaseballApp\n"]},"metadata":{},"sourceType":"module"}