{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    getPlayer(searchStr: \\\"Christian Yelich\\\") {\\n      name\\n      id\\n    }\\n  }\\n  \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n//import React, { useReducer, createContext, useContext, Dispatch } from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\n//import SubmitSearch from './submitData';\n//import { state, actionInterface, initialState } from '../state';\n//import { reducer } from '../reducer';\nimport '../application.css';\n// define context properties\n\n/*interface IContextProps {\n  state: state,\n  dispatch: Dispatch<actionInterface>;\n}*/\n// instantiate context with properties\n//const StateContext = createContext({} as IContextProps);\nconst client = new ApolloClient({\n  uri: 'http://192.168.1.67:4000'\n});\nclient.query({\n  query: gql(_templateObject())\n}).then(result => console.log(result)); // main function - note app is not a functional component as we had with redux\n\n/*function BaseballApp(): any {\n  // set up useReducer hook with our reducer and initialState\n  // any actions received by reducer from now on will create a new state\n  //const [state, dispatch] = useReducer(reducer, initialState);\n\n  // wrap our app with StateContext so that all components have access to state\n  return (\n    <StateContext.Provider value={{state, dispatch}}>\n      <div className=\"app\">\n        <NameSearch />\n        <br />\n        <SubmitSearch />\n        </div>\n    </StateContext.Provider>\n  );\n}*/\n// add hot updates\n\nif (module.hot) {\n  module.hot.accept();\n} // set up useContext hook here for state\n//export const useStateValue = () => useContext(StateContext);\n\n\nexport default BaseballApp;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/BaseballApp.tsx"],"names":["ApolloClient","gql","client","uri","query","then","result","console","log","module","hot","accept","BaseballApp"],"mappings":";;;;;;;;;;;;AAAA;AAEA,OAAOA,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AAEA;AACA;AACA;AACA,OAAO,oBAAP;AAGA;;AACA;;;;AAKA;AACA;AAEA,MAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIAD,MAAM,CAACE,KAAP,CAAa;AACXA,EAAAA,KAAK,EAAEH,GAAF;AADM,CAAb,EASGI,IATH,CASQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CATlB,E,CAWA;;AACA;;;;;;;;;;;;;;;;AAiBA;;AACA,IAAGG,MAAM,CAACC,GAAV,EAAc;AACZD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD,C,CAED;AACA;;;AACA,eAAeC,WAAf","sourcesContent":["//import React, { useReducer, createContext, useContext, Dispatch } from 'react';\nimport React from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport NameSearch from './NameSearch';\n//import SubmitSearch from './submitData';\n//import { state, actionInterface, initialState } from '../state';\n//import { reducer } from '../reducer';\nimport '../application.css'\ndeclare let module: any;\n\n// define context properties\n/*interface IContextProps {\n  state: state,\n  dispatch: Dispatch<actionInterface>;\n}*/\n\n// instantiate context with properties\n//const StateContext = createContext({} as IContextProps);\n\nconst client = new ApolloClient({\n  uri: 'http://192.168.1.67:4000'\n});\n\nclient.query({\n  query: gql`\n  {\n    getPlayer(searchStr: \"Christian Yelich\") {\n      name\n      id\n    }\n  }\n  `\n}).then(result => console.log(result));\n\n// main function - note app is not a functional component as we had with redux\n/*function BaseballApp(): any {\n  // set up useReducer hook with our reducer and initialState\n  // any actions received by reducer from now on will create a new state\n  //const [state, dispatch] = useReducer(reducer, initialState);\n\n  // wrap our app with StateContext so that all components have access to state\n  return (\n    <StateContext.Provider value={{state, dispatch}}>\n      <div className=\"app\">\n        <NameSearch />\n        <br />\n        <SubmitSearch />\n        </div>\n    </StateContext.Provider>\n  );\n}*/\n\n// add hot updates\nif(module.hot){\n  module.hot.accept();\n}\n\n// set up useContext hook here for state\n//export const useStateValue = () => useContext(StateContext);\nexport default BaseballApp\n"]},"metadata":{},"sourceType":"module"}