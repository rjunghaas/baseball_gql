{"ast":null,"code":"var _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/BaseballApp.tsx\";\n//import React, { useReducer, createContext, useContext, Dispatch } from 'react';\nimport React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { onError } from 'apollo-link-error';\nimport NameSearch from './NameSearch'; //import SubmitSearch from './submitData';\n//import { state, actionInterface, initialState } from '../state';\n//import { reducer } from '../reducer';\n\nimport '../application.css';\nconst errorLink = onError(({\n  graphQLErrors\n}) => {\n  if (graphQLErrors) graphQLErrors.map(({\n    message\n  }) => console.log(message));\n}); // define context properties\n\n/*interface IContextProps {\n  state: state,\n  dispatch: Dispatch<actionInterface>;\n}*/\n// instantiate context with properties\n//const StateContext = createContext({} as IContextProps);\n\nconst client = new ApolloClient({\n  uri: 'http://192.168.1.67:5000',\n  link: ApolloLink.from([errorLink])\n}); // GraphQL query\n\n/*client.query({\n  query: gql`\n  {\n    getPlayer(searchStr: \"Christian Yelich\") {\n      name\n      id\n    }\n  }\n  `\n}).then(result => console.log(result.data.getPlayer.id));*/\n// main function - note app is not a functional component as we had with redux\n\nfunction BaseballApp() {\n  // set up useReducer hook with our reducer and initialState\n  // any actions received by reducer from now on will create a new state\n  //const [state, dispatch] = useReducer(reducer, initialState);\n  // wrap our app with StateContext so that all components have access to state\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(NameSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })));\n} // add hot updates\n\n\nif (module.hot) {\n  module.hot.accept();\n} // set up useContext hook here for state\n//export const useStateValue = () => useContext(StateContext);\n\n\nexport default BaseballApp;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/BaseballApp.tsx"],"names":["React","ApolloClient","ApolloProvider","onError","NameSearch","errorLink","graphQLErrors","map","message","console","log","client","uri","link","ApolloLink","from","BaseballApp","module","hot","accept"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAkC,cAAlC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CACA;AACA;AACA;;AACA,OAAO,oBAAP;AAGA,MAAMC,SAAS,GAAGF,OAAO,CAAC,CAAC;AAAEG,EAAAA;AAAF,CAAD,KAAuB;AAC/C,MAAIA,aAAJ,EAAmBA,aAAa,CAACC,GAAd,CAAkB,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiBC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAnC;AACpB,CAFwB,CAAzB,C,CAIA;;AACA;;;;AAKA;AACA;;AAEA,MAAMG,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC9BW,EAAAA,GAAG,EAAE,0BADyB;AAE9BC,EAAAA,IAAI,EAAEC,UAAU,CAACC,IAAX,CAAgB,CAACV,SAAD,CAAhB;AAFwB,CAAjB,CAAf,C,CAKA;;AACA;;;;;;;;;;AAWA;;AACA,SAASW,WAAT,GAA4B;AAC1B;AACA;AACA;AAEA;AACA,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEL,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD,C,CAED;;;AACA,IAAGM,MAAM,CAACC,GAAV,EAAc;AACZD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD,C,CAED;AACA;;;AACA,eAAeH,WAAf","sourcesContent":["//import React, { useReducer, createContext, useContext, Dispatch } from 'react';\nimport React from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { onError } from 'apollo-link-error';\nimport NameSearch from './NameSearch';\n//import SubmitSearch from './submitData';\n//import { state, actionInterface, initialState } from '../state';\n//import { reducer } from '../reducer';\nimport '../application.css'\ndeclare let module: any;\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message))\n})\n\n// define context properties\n/*interface IContextProps {\n  state: state,\n  dispatch: Dispatch<actionInterface>;\n}*/\n\n// instantiate context with properties\n//const StateContext = createContext({} as IContextProps);\n\nconst client = new ApolloClient({\n  uri: 'http://192.168.1.67:5000',\n  link: ApolloLink.from([errorLink]),\n});\n\n// GraphQL query\n/*client.query({\n  query: gql`\n  {\n    getPlayer(searchStr: \"Christian Yelich\") {\n      name\n      id\n    }\n  }\n  `\n}).then(result => console.log(result.data.getPlayer.id));*/\n\n// main function - note app is not a functional component as we had with redux\nfunction BaseballApp(): any {\n  // set up useReducer hook with our reducer and initialState\n  // any actions received by reducer from now on will create a new state\n  //const [state, dispatch] = useReducer(reducer, initialState);\n\n  // wrap our app with StateContext so that all components have access to state\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"app\">\n        <NameSearch />\n        <br />\n        </div>\n    </ApolloProvider>\n  );\n}\n\n// add hot updates\nif(module.hot){\n  module.hot.accept();\n}\n\n// set up useContext hook here for state\n//export const useStateValue = () => useContext(StateContext);\nexport default BaseballApp\n"]},"metadata":{},"sourceType":"module"}