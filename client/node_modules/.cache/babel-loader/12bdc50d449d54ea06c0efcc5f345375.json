{"ast":null,"code":"import _slicedToArray from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query Player($searchStr: String!){\\n    getPlayer(searchStr: $searchStr){\\n      searchStr\\n      name\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nconst PLAYER_QUERY = gql(_templateObject()); // NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\nfunction NameSearch() {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient(); // Use useQuery() hook to pass in text values\n\n  const _useLazyQuery = useLazyQuery(PLAYER_QUERY),\n        _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n        getPlayerQuery = _useLazyQuery2[0],\n        _useLazyQuery2$ = _useLazyQuery2[1],\n        loading = _useLazyQuery2$.loading,\n        error = _useLazyQuery2$.error,\n        data = _useLazyQuery2$.data;\n\n  let dataObj = getPlayerQuery({\n    variables: {\n      searchStr: 'Marcus Se'\n    }\n  });\n  console.log(dataObj); // handle return and error states\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"'Loading...'\");\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  } // Cache results from our GraphQL query\n\n\n  client.writeData({\n    data: {\n      searchStr: dataObj.getPlayer.searchStr,\n      name: dataObj.getPlayer.name,\n      id: dataObj.getPlayer.id\n    }\n  }); // Render JSX element and insert data\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: data.getPlayer.searchStr,\n    onChange: e => e.preventDefault(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, data.getPlayer.name));\n}\n\n;\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useLazyQuery","useApolloClient","PLAYER_QUERY","NameSearch","client","getPlayerQuery","loading","error","data","dataObj","variables","searchStr","console","log","warn","message","writeData","getPlayer","name","id","e","preventDefault"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,qBAA9C;AAGA,MAAMC,YAAY,GAAGH,GAAH,mBAAlB,C,CAUA;AACA;;AACA,SAASI,UAAT,GAA2B;AACzB;AACA,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CAFyB,CAIzB;;AAJyB,wBAK0BD,YAAY,CAACE,YAAD,CALtC;AAAA;AAAA,QAKlBG,cALkB;AAAA;AAAA,QAKAC,OALA,mBAKAA,OALA;AAAA,QAKSC,KALT,mBAKSA,KALT;AAAA,QAKgBC,IALhB,mBAKgBA,IALhB;;AAMzB,MAAIC,OAAO,GAAGJ,cAAc,CAAC;AAACK,IAAAA,SAAS,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ;AAAZ,GAAD,CAA5B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAPyB,CASzB;;AACA,MAAIH,OAAJ,EAAa,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;;AACb,MAAIC,KAAJ,EAAW;AACTK,IAAAA,OAAO,CAACE,IAAR,CAAaP,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACQ,OAArB,MAAR;AACD,GAdwB,CAgBzB;;;AACAX,EAAAA,MAAM,CAACY,SAAP,CAAiB;AACfR,IAAAA,IAAI,EAAE;AACJG,MAAAA,SAAS,EAAEF,OAAO,CAACQ,SAAR,CAAkBN,SADzB;AAEJO,MAAAA,IAAI,EAAET,OAAO,CAACQ,SAAR,CAAkBC,IAFpB;AAGJC,MAAAA,EAAE,EAAEV,OAAO,CAACQ,SAAR,CAAkBE;AAHlB;AADS,GAAjB,EAjByB,CAyBzB;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAEX,IAAI,CAACS,SAAL,CAAeN,SAA/D;AAA0E,IAAA,QAAQ,EAAES,CAAC,IAAEA,CAAC,CAACC,cAAF,EAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKb,IAAI,CAACS,SAAL,CAAeC,IAApB,CAHF,CADF;AAOD;;AAAA;AAED,eAAef,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useLazyQuery, useApolloClient } from '@apollo/react-hooks';\nimport { typeDefs } from './BaseballApp';\n\nconst PLAYER_QUERY = gql`\n  query Player($searchStr: String!){\n    getPlayer(searchStr: $searchStr){\n      searchStr\n      name\n      id\n    }\n  }\n`;\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nfunction NameSearch(): any {\n  // Initialize ApolloClient so we can get access to ApolloProvider's cache\n  const client = useApolloClient();\n\n  // Use useQuery() hook to pass in text values\n  const [getPlayerQuery, { loading, error, data }] = useLazyQuery(PLAYER_QUERY);\n  let dataObj = getPlayerQuery({variables: {searchStr: 'Marcus Se'}});\n  console.log(dataObj);\n\n  // handle return and error states\n  if (loading) return (<div>'Loading...'</div>);\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  // Cache results from our GraphQL query\n  client.writeData({\n    data: {\n      searchStr: dataObj.getPlayer.searchStr,\n      name: dataObj.getPlayer.name,\n      id: dataObj.getPlayer.id,\n    }\n  });\n\n  // Render JSX element and insert data\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={data.getPlayer.searchStr} onChange={e=>e.preventDefault() }/>\n      <br/>\n      <h3>{data.getPlayer.name}</h3>\n    </div>\n  )\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}