{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  getPlayerVorp(id: 11477, startDate: \\\"01/01/2018\\\", endDate: \\\"12/31/2018\\\")\\n  {\\n      vorp\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\n/*const VORP_QUERY = gql`\n  query PlayerVorp($id: Int!, $startDate: String!, $endDate: String!){\n    getPlayerVorp(id: 11477, startDate: \"01/01/2018\", endDate: \"12/31/2018\"){\n      vorp\n    }\n  }\n`;*/\n\nconst VORP_QUERY = gql(_templateObject());\n\n// helper function to validate string is in proper date format\nfunction validateDate(testdate) {\n  var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/;\n  return date_regex.test(testdate);\n}\n\nconst SubmitSearch = () => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n  const client = useApolloClient(); // on changing date fields, if valid date, then set state property for correct\n  // date.  Use reducer to handle these state changes\n\n  /*function setDate(dateType:string, date:string): any {\n    if (dateType === \"startDate\") {\n      if(validateDate(date)) {\n        // set startDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setStartDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateStartDate([date]));\n      }\n    } else if (dateType === \"endDate\"){\n      if(validateDate(date)) {\n        // set endDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setEndDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateEndDate([date]));\n      }\n    }\n  }*/\n\n  const _useQuery = useQuery(VORP_QUERY),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (loading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"loading...\");\n\n  if (error) {\n    console.warn(error);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"`Error! $\", error.message, \"`\");\n  } // Upon pressing submit button, construct URL and make call to API.\n  // Take results and send to action creator to update state with new VORP\n\n  /*async function getVorp(id:number, startDate:string, endDate:string): Promise<any> {\n    let idStr = id.toString();\n    let url:string = VORP_URL  + idStr + \"&startDate=\" + startDate + \"&endDate=\" + endDate;\n     const response = await fetch(url);\n    const data = await response.json();\n    dispatch(baseballActions.vorpSuccess([startDate, endDate, data.message]));\n  }*/\n  // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n\n  /*return (\n    <div>\n        <div> <h4>Start Date for Player:</h4> <br /> </div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" value={ state.startDateStr } onChange = { (e) => setDate(\"startDate\", e.target.value) } /></div>\n        <div> <h4>End Date for Player: </h4><br /></div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" value={ state.endDateStr } onChange = { (e) => setDate(\"endDate\", e.target.value) } /></div>\n        <div><input type=\"submit\" value=\"Submit\" name=\"submit\" onClick = { () => getVorp(state.id, state.startDate, state.endDate) }/></div>\n        <br />\n        <div><h3>VORP: { state.vorp.toFixed(2) }</h3></div>\n    </div>\n  )*/\n\n\n  console.log(data);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, data.getPlayerVorp.vorp);\n};\n\nexport default SubmitSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/submitData.tsx"],"names":["React","gql","useQuery","useApolloClient","VORP_QUERY","validateDate","testdate","date_regex","test","SubmitSearch","client","loading","error","data","console","warn","message","log","getPlayerVorp","vorp"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,qBAA1C;AAEA;;;;;;;;AAQA,MAAMC,UAAU,GAAGH,GAAH,mBAAhB;;AAWA;AACA,SAASI,YAAT,CAAsBC,QAAtB,EAAwC;AACpC,MAAIC,UAAU,GAAG,yDAAjB;AACA,SAAOA,UAAU,CAACC,IAAX,CAAgBF,QAAhB,CAAP;AACH;;AAED,MAAMG,YAAY,GAAG,MAAW;AAC9B;AACA;AACA,QAAMC,MAAM,GAAGP,eAAe,EAA9B,CAH8B,CAK9B;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAP8B,oBA2BGD,QAAQ,CAACE,UAAD,CA3BX;AAAA,QA2BtBO,OA3BsB,aA2BtBA,OA3BsB;AAAA,QA2BbC,KA3Ba,aA2BbA,KA3Ba;AAAA,QA2BNC,IA3BM,aA2BNA,IA3BM;;AA6B9B,MAAGF,OAAH,EAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACZ,MAAIC,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACC,IAAR,CAAaH,KAAb;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAeA,KAAK,CAACI,OAArB,MAAR;AACD,GAjC6B,CAmC9B;AACA;;AACA;;;;;;;AASA;AACA;AACA;;AACA;;;;;;;;;;;;;AAWAF,EAAAA,OAAO,CAACG,GAAR,CAAYJ,IAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAI,CAACK,aAAL,CAAmBC,IAA1B,CAAP;AACD,CA9DD;;AAgEA,eAAeV,YAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\n\n/*const VORP_QUERY = gql`\n  query PlayerVorp($id: Int!, $startDate: String!, $endDate: String!){\n    getPlayerVorp(id: 11477, startDate: \"01/01/2018\", endDate: \"12/31/2018\"){\n      vorp\n    }\n  }\n`;*/\n\nconst VORP_QUERY = gql`\n  getPlayerVorp(id: 11477, startDate: \"01/01/2018\", endDate: \"12/31/2018\")\n  {\n      vorp\n  }\n`;\n\ntype vorpQueryObj = {\n  vorp: number\n}\n\n// helper function to validate string is in proper date format\nfunction validateDate(testdate: string) {\n    var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/ ;\n    return date_regex.test(testdate);\n}\n\nconst SubmitSearch = (): any => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n  const client = useApolloClient();\n\n  // on changing date fields, if valid date, then set state property for correct\n  // date.  Use reducer to handle these state changes\n  /*function setDate(dateType:string, date:string): any {\n    if (dateType === \"startDate\") {\n      if(validateDate(date)) {\n        // set startDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setStartDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateStartDate([date]));\n      }\n    } else if (dateType === \"endDate\"){\n      if(validateDate(date)) {\n        // set endDate in cache\n        let dateArr:string[] = [date];\n        dispatch(baseballActions.setEndDate(dateArr));\n      } else {\n        dispatch(baseballActions.updateEndDate([date]));\n      }\n    }\n  }*/\n\n  const { loading, error, data } = useQuery(VORP_QUERY);\n\n  if(loading) return <div>loading...</div>;\n  if (error) {\n    console.warn(error);\n    return (<div>`Error! ${error.message}`</div>);\n  }\n\n  // Upon pressing submit button, construct URL and make call to API.\n  // Take results and send to action creator to update state with new VORP\n  /*async function getVorp(id:number, startDate:string, endDate:string): Promise<any> {\n    let idStr = id.toString();\n    let url:string = VORP_URL  + idStr + \"&startDate=\" + startDate + \"&endDate=\" + endDate;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    dispatch(baseballActions.vorpSuccess([startDate, endDate, data.message]));\n  }*/\n\n  // render component, connect date fields to relevant state props, set onchange\n  // those fields to relevant function, and onclick for submit button to relevant\n  // function.  Show rounded value of vorp property\n  /*return (\n    <div>\n        <div> <h4>Start Date for Player:</h4> <br /> </div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" value={ state.startDateStr } onChange = { (e) => setDate(\"startDate\", e.target.value) } /></div>\n        <div> <h4>End Date for Player: </h4><br /></div>\n        <div> <input type=\"text\" placeholder=\"MM/DD/YYYY\" value={ state.endDateStr } onChange = { (e) => setDate(\"endDate\", e.target.value) } /></div>\n        <div><input type=\"submit\" value=\"Submit\" name=\"submit\" onClick = { () => getVorp(state.id, state.startDate, state.endDate) }/></div>\n        <br />\n        <div><h3>VORP: { state.vorp.toFixed(2) }</h3></div>\n    </div>\n  )*/\n  console.log(data);\n  return <div>{ data.getPlayerVorp.vorp }</div>\n}\n\nexport default SubmitSearch;\n"]},"metadata":{},"sourceType":"module"}