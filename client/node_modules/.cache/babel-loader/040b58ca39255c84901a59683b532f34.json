{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    {\\n      getPlayer(searchStr: String!){\\n        name\\n        id\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks'; //import { baseballActions } from '../state';\n//import { useStateValue } from './BaseballApp';\n//let NAME_SEARCH_URL: string = \"http://192.168.1.67:5000/player?str=\"\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\n\nconst NameSearch = () => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n  // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n\n  /*async function getName(searchText:string): Promise<any> {\n    let str:string = searchText;\n    let url:string = NAME_SEARCH_URL + str;\n     const response = await fetch(url);\n    const data = await response.json();\n    // Once response received, convert to JSON and dispatch to action creator\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  }*/\n  const PLAYER_QUERY = gql(_templateObject());\n\n  function playerQuery(searchText) {\n    const _useQuery = useQuery(PLAYER_QUERY, {\n      variables: {\n        searchStr: searchText\n      }\n    }),\n          loading = _useQuery.loading,\n          error = _useQuery.error,\n          data = _useQuery.data;\n\n    if (error) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Error \");\n    let playerName = data.getPlayer.name;\n    console.log(playerName);\n    let playerId = data.getPlayer.id;\n    console.log(playerId); //return playerName\n  }\n\n  async function getName(searchText) {} //let searchStr: string = searchText;\n  // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Enter Player's Name\",\n    value: '',\n    onChange: e => console.log(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"test\"));\n};\n\nexport default NameSearch;","map":{"version":3,"sources":["/Users/Ryan/Desktop/baseball_gql/webapp-hooks/src/components/NameSearch.tsx"],"names":["React","gql","useQuery","NameSearch","PLAYER_QUERY","playerQuery","searchText","variables","searchStr","loading","error","data","playerName","getPlayer","name","console","log","playerId","id","getName","e"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB,C,CACA;AACA;AACA;AAEA;AACA;;AACA,MAAMC,UAAU,GAAG,MAAW;AAC5B;AACA;AAEA;AACA;;AACA;;;;;;;;AAUA,QAAMC,YAAY,GAAGH,GAAH,mBAAlB;;AASA,WAASI,WAAT,CAAqBC,UAArB,EAAwC;AAAA,sBACLJ,QAAQ,CAACE,YAAD,EAAe;AAACG,MAAAA,SAAS,EAAE;AAACC,QAAAA,SAAS,EAAEF;AAAZ;AAAZ,KAAf,CADH;AAAA,UAC9BG,OAD8B,aAC9BA,OAD8B;AAAA,UACrBC,KADqB,aACrBA,KADqB;AAAA,UACdC,IADc,aACdA,IADc;;AAGtC,QAAGD,KAAH,EAAU,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEV,QAAIE,UAAiB,GAAGD,IAAI,CAACE,SAAL,CAAeC,IAAvC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AAEA,QAAIK,QAAe,GAAGN,IAAI,CAACE,SAAL,CAAeK,EAArC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EATsC,CAUtC;AACD;;AAED,iBAAeE,OAAf,CAAuBb,UAAvB,EAAyD,CAGxD,CAHD,CACE;AAIF;AACA;;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,WAAW,EAAC,qBAAnB;AAAyC,IAAA,KAAK,EAAG,EAAjD;AAAsD,IAAA,QAAQ,EAAEc,CAAC,IAAIL,OAAO,CAACC,GAAR,CAAYI,CAAZ,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,MAAN,CAHF,CADF;AAOD,CApDD;;AAsDA,eAAejB,UAAf","sourcesContent":["import React from \"react\";\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n//import { baseballActions } from '../state';\n//import { useStateValue } from './BaseballApp';\n//let NAME_SEARCH_URL: string = \"http://192.168.1.67:5000/player?str=\"\n\n// NameSearch function for taking text entered and searching for closest player\n// whose name matches the text\nconst NameSearch = (): any => {\n  // connect to our context so that we can access state values\n  //const {state, dispatch} = useStateValue();\n\n  // async function that will be triggered when text field changes to send\n  // latest text to API for querying name matches\n  /*async function getName(searchText:string): Promise<any> {\n    let str:string = searchText;\n    let url:string = NAME_SEARCH_URL + str;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    // Once response received, convert to JSON and dispatch to action creator\n    dispatch(baseballActions.matchSuccess([data.message[0], str, data.message[1]]));\n  }*/\n\n  const PLAYER_QUERY = gql`\n    {\n      getPlayer(searchStr: String!){\n        name\n        id\n      }\n    }\n  `;\n\n  function playerQuery(searchText:string) {\n    const { loading, error, data } = useQuery(PLAYER_QUERY, {variables: {searchStr: searchText}});\n\n    if(error) return <p>Error </p>\n\n    let playerName:string = data.getPlayer.name;\n    console.log(playerName);\n\n    let playerId:number = data.getPlayer.id;\n    console.log(playerId);\n    //return playerName\n  }\n\n  async function getName(searchText: string): Promise<any> {\n    //let searchStr: string = searchText;\n\n  }\n\n  // render object and make value of text field equal to str property, trigger\n  // getName function onchange, and show current value of nm property below\n  return (\n    <div>\n      <input placeholder=\"Enter Player's Name\" value={ '' } onChange={e => console.log(e)} />\n      <br />\n      <h3>{ \"test\" }</h3>\n    </div>\n  );\n};\n\nexport default NameSearch;\n"]},"metadata":{},"sourceType":"module"}